1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  1) import { NextResponse } from 'next/server';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  2) import fetch from 'node-fetch';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  3) import jwt from 'jsonwebtoken';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  4) import connectDB from '../../../../../../lib/mongodb';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  5) import User from '../../../../../../models/User';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  6) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  7) const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  8) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  9) export async function GET(request) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 10)   try {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 11)     const { searchParams } = new URL(request.url);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 12)     const code = searchParams.get('code');
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 13)     const state = searchParams.get('state');
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 14) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 15)     if (!code) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 16)       return NextResponse.json({ error: 'No code from LinkedIn' }, { status: 400 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 17)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 18) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 19)     const tokenRes = await fetch('https://www.linkedin.com/oauth/v2/accessToken', {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 20)       method: 'POST',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 21)       headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 22)       body: new URLSearchParams({
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 23)         grant_type: 'authorization_code',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 24)         code,
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 25)         redirect_uri: process.env.LINKEDIN_REDIRECT_URI || 'http://localhost:3000/api/auth/linkedin/callback',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 26)         client_id: process.env.LINKEDIN_CLIENT_ID,
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 27)         client_secret: process.env.LINKEDIN_CLIENT_SECRET
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 28)       })
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 29)     });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 30) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 31)     if (!tokenRes.ok) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 32)       const text = await tokenRes.text();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 33)       console.error('LinkedIn token error:', text);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 34)       return NextResponse.json({ error: 'Failed to exchange code for token' }, { status: 500 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 35)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 36) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 37)     const tokenData = await tokenRes.json();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 38)     const accessToken = tokenData.access_token;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 39) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 40)     // Fetch basic profile and email
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 41)     const profileRes = await fetch('https://api.linkedin.com/v2/me', {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 42)       headers: { Authorization: `Bearer ${accessToken}` }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 43)     });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 44)     const profileJson = await profileRes.json();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 45) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 46)     const emailRes = await fetch('https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))', {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 47)       headers: { Authorization: `Bearer ${accessToken}` }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 48)     });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 49)     const emailJson = await emailRes.json();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 50) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 51)     const linkedinId = profileJson.id;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 52)     const firstName = profileJson.localizedFirstName || profileJson.firstName?.localized?.en_US || '';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 53)     const lastName = profileJson.localizedLastName || profileJson.lastName?.localized?.en_US || '';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 54)     const fullName = `${firstName} ${lastName}`.trim();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 55)     const email = (emailJson?.elements?.[0]?.['handle~']?.emailAddress) || null;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 56) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 57)     await connectDB();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 58) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 59)     // Find or create user
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 60)     let user = null;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 61)     if (email) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 62)       user = await User.findOne({ email });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 63)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 64) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 65)     if (!user) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 66)       // Create a new user with OAuth flag
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 67)       user = new User({
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 68)         name: fullName || 'LinkedIn User',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 69)         email: email || `linkedin_${linkedinId}@noemail.local`,
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 70)         isOAuthUser: true,
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 71)         linkedinId,
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 72)         linkedinAccessToken: accessToken
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 73)       });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 74)       await user.save();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 75)     } else {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 76)       // Link LinkedIn to existing user
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 77)       user.linkedinId = linkedinId;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 78)       user.linkedinAccessToken = accessToken;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 79)       await user.save();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 80)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 81) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 82)     // Issue our JWT and redirect to a client page that will set localStorage
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 83)     const token = jwt.sign({ userId: user._id, email: user.email }, JWT_SECRET, { expiresIn: '7d' });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 84) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 85)     // Redirect to a lightweight client page that stores token and redirects to dashboard
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 86)     const redirectUrl = `/linkedin-callback?token=${token}`;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 87)     return NextResponse.redirect(redirectUrl);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 88)   } catch (err) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 89)     console.error('LinkedIn callback error:', err);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 90)     return NextResponse.json({ error: 'LinkedIn callback failed' }, { status: 500 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 91)   }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 92) }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  1) import { NextResponse } from 'next/server';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  2) import fetch from 'node-fetch';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  3) import jwt from 'jsonwebtoken';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  4) import connectDB from '../../../../../lib/mongodb';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  5) import User from '../../../../../models/User';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  6) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  7) // This route links a LinkedIn access token (obtained client-side via OAuth popup) to an existing logged-in user
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  8) export async function POST(request) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  9)   try {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 10)     const authHeader = request.headers.get('authorization');
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 11)     if (!authHeader || !authHeader.startsWith('Bearer ')) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 12)       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 13)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 14)     const token = authHeader.substring(7);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 15)     const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 16) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 17)     await connectDB();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 18)     const user = await User.findById(decoded.userId);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 19)     if (!user) return NextResponse.json({ error: 'User not found' }, { status: 404 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 20) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 21)     const { accessToken } = await request.json();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 22)     if (!accessToken) return NextResponse.json({ error: 'No access token' }, { status: 400 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 23) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 24)     // Verify/access LinkedIn profile
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 25)     const profileRes = await fetch('https://api.linkedin.com/v2/me', { headers: { Authorization: `Bearer ${accessToken}` } });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 26)     if (!profileRes.ok) return NextResponse.json({ error: 'Invalid LinkedIn token' }, { status: 400 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 27)     const profileJson = await profileRes.json();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 28) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 29)     user.linkedinId = profileJson.id;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 30)     user.linkedinAccessToken = accessToken;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 31)     await user.save();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 32) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 33)     return NextResponse.json({ message: 'LinkedIn account linked' });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 34)   } catch (err) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 35)     console.error('LinkedIn link error:', err);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 36)     return NextResponse.json({ error: 'Link failed' }, { status: 500 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 37)   }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 38) }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  1) import { NextResponse } from 'next/server';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  2) import jwt from 'jsonwebtoken';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  3) import connectDB from '../../../../../../lib/mongodb';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  4) import User from '../../../../../../models/User';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  5) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  6) // Dev-only mock link route: accepts { linkedinId, name, email, profileUrl, picture }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  7) export async function POST(request) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  8)   try {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  9)     // Only allow on localhost/dev - basic guard
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 10)     const host = request.headers.get('host') || '';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 11)     if (!host.includes('localhost') && process.env.NODE_ENV === 'production') {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 12)       return NextResponse.json({ error: 'Mock linking not allowed in production' }, { status: 403 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 13)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 14) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 15)     const authHeader = request.headers.get('authorization');
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 16)     if (!authHeader || !authHeader.startsWith('Bearer ')) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 17)       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 18)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 19) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 20)     const token = authHeader.substring(7);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 21)     const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 22)     if (!decoded || !decoded.userId) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 23)       return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 24)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 25) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 26)     const body = await request.json();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 27)     const { linkedinId, name, email, profileUrl, picture } = body;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 28)     if (!linkedinId) return NextResponse.json({ error: 'linkedinId required' }, { status: 400 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 29) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 30)     await connectDB();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 31)     const user = await User.findById(decoded.userId);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 32)     if (!user) return NextResponse.json({ error: 'User not found' }, { status: 404 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 33) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 34)     user.linkedinId = linkedinId;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 35)     if (name) user.name = name;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 36)     if (email) user.email = email;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 37)     if (profileUrl) user.linkedinProfileUrl = profileUrl;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 38)     if (picture) user.linkedinProfilePicture = picture;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 39)     await user.save();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 40) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 41)     return NextResponse.json({ message: 'Mock LinkedIn linked', linkedinId });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 42)   } catch (err) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 43)     console.error('Mock link error:', err);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 44)     return NextResponse.json({ error: 'Mock link failed' }, { status: 500 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 45)   }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 46) }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  1) import { NextResponse } from 'next/server';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  2) import fetch from 'node-fetch';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  3) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  4) // This route exchanges the code for an access token and returns a small HTML page
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  5) // which posts the access token back to the opener window and closes the popup.
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  6) export async function GET(request) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  7)   try {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  8)     const { searchParams } = new URL(request.url);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  9)     const code = searchParams.get('code');
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 10) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 11)     if (!code) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 12)       return NextResponse.json({ error: 'No code provided' }, { status: 400 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 13)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 14) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 15)     const tokenRes = await fetch('https://www.linkedin.com/oauth/v2/accessToken', {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 16)       method: 'POST',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 17)       headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 18)       body: new URLSearchParams({
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 19)         grant_type: 'authorization_code',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 20)         code,
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 21)         redirect_uri: process.env.LINKEDIN_POPUP_REDIRECT_URI || 'http://localhost:3000/api/auth/linkedin/popup-callback',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 22)         client_id: process.env.LINKEDIN_CLIENT_ID,
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 23)         client_secret: process.env.LINKEDIN_CLIENT_SECRET
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 24)       })
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 25)     });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 26) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 27)     if (!tokenRes.ok) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 28)       const text = await tokenRes.text();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 29)       console.error('LinkedIn token error:', text);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 30)       return NextResponse.json({ error: 'Failed to exchange code for token' }, { status: 500 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 31)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 32) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 33)     const tokenData = await tokenRes.json();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 34)     const accessToken = tokenData.access_token;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 35) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 36)     // Return HTML that posts token to opener and closes
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 37)     const html = `<!doctype html>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 38) <html>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 39)   <head><meta charset="utf-8"><title>LinkedIn Link</title></head>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 40)   <body>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 41)     <script>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 42)       try {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 43)         window.opener.postMessage({ linkedinAccessToken: '${accessToken}' }, window.location.origin);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 44)       } catch (e) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 45)         console.error('postMessage failed', e);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 46)       }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 47)       window.close();
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 48)     </script>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 49)     <p>Linking LinkedIn account... If this window does not close, you may close it manually.</p>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 50)   </body>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 51) </html>`;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 52) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 53)     return new Response(html, { headers: { 'Content-Type': 'text/html' } });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 54)   } catch (err) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 55)     console.error('Popup callback error:', err);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 56)     return NextResponse.json({ error: 'Popup callback failed' }, { status: 500 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 57)   }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 58) }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  1) import { NextResponse } from 'next/server';
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  2) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  3) // Redirects the user to LinkedIn's OAuth authorization page
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  4) export async function GET(request) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  5)   try {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  6)     const clientId = process.env.LINKEDIN_CLIENT_ID;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  7)     // If popup param present, use popup redirect URI so callback can postMessage to opener
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  8)     const url = new URL(request.url);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  9)     const isPopup = url.searchParams.get('popup');
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 10)     const redirectUri = isPopup
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 11)       ? (process.env.LINKEDIN_POPUP_REDIRECT_URI || 'http://localhost:3000/api/auth/linkedin/popup-callback')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 12)       : (process.env.LINKEDIN_REDIRECT_URI || 'http://localhost:3000/api/auth/linkedin/callback');
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 13)     const scope = encodeURIComponent('r_liteprofile r_emailaddress');
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 14)     const state = Math.random().toString(36).substring(2, 15);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 15) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 16)     const authUrl = `https://www.linkedin.com/oauth/v2/authorization?response_type=code&client_id=${clientId}&redirect_uri=${encodeURIComponent(redirectUri)}&state=${state}&scope=${scope}`;
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 17) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 18)     return NextResponse.redirect(authUrl);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 19)   } catch (err) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 20)     console.error('LinkedIn start error:', err);
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 21)     return NextResponse.json({ error: 'Could not start LinkedIn OAuth' }, { status: 500 });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 22)   }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 23) }
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 130)     // Update user record with resume path and DB-stored copy
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 147)   // Update user with new resume path (disk)
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 152)   // Also save a DB-stored copy (filename, content-type, binary data)
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 153)   user.resumeFilename = filename;
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 154)   user.resumeContentType = file.type;
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 155)   user.resumeData = buffer;
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 156)     
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 191)         resumePath: savedUser.resumePath,
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 192)         resumeFilename: savedUser.resumeFilename
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 214)     // Prefer serving from DB if available
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 215)     await connectDB();
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 216)     const userWithFile = await User.findOne({ resumeFilename: filename, resumeData: { $ne: null } });
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 217)     if (userWithFile && userWithFile.resumeData) {
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 218)       const fileBuffer = Buffer.from(userWithFile.resumeData);
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 219)       const contentType = userWithFile.resumeContentType || 'application/octet-stream';
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 220)       return new Response(fileBuffer, {
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 221)         headers: {
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 222)           'Content-Type': contentType,
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 223)           'Content-Disposition': `attachment; filename="${userWithFile.resumeOriginalName || filename}"`,
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 224)         },
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 225)       });
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 226)     }
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 227) 
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400 228)     // Fallback to disk
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  10) import LinkedInLinkPopup from '@/components/LinkedInLinkPopup'
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  11) import LinkedInMockLink from '@/components/LinkedInMockLink'
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 137)             <div className="mt-4 space-y-3">
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 138)               <button className="btn-primary w-full">
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 141)               <div className="flex items-center justify-center gap-3">
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 142)                 <LinkedInLinkPopup />
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 143)                 <LinkedInMockLink />
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 144)               </div>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 145)             </div>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  1) 'use client'
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  2) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  3) import { useEffect } from 'react'
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  4) import { useRouter } from 'next/navigation'
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  5) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  6) export default function LinkedInCallbackPage({ searchParams }) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  7)   const router = useRouter()
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  8) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  9)   useEffect(() => {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 10)     // Read token from query param and store in localStorage
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 11)     const params = new URLSearchParams(window.location.search)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 12)     const token = params.get('token')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 13)     if (token) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 14)       localStorage.setItem('token', token)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 15)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 16)     // Redirect to dashboard or home
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 17)     router.push('/dashboard')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 18)   }, [])
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 19) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 20)   return (
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 21)     <div className="p-8">
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 22)       <h2>Signing you in...</h2>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 23)     </div>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 24)   )
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 25) }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  1) 'use client'
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  2) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  3) import React from 'react'
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  4) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  5) export default function LinkedInButton({ label = 'Sign in with LinkedIn' }) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  6)   const onClick = () => {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  7)     // Open the start route in a new window (LinkedIn will redirect back to our callback)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  8)     window.location.href = '/api/auth/linkedin/start'
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  9)   }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 10) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 11)   return (
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 12)     <button onClick={onClick} className="px-4 py-2 bg-blue-700 text-white rounded">
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 13)       {label}
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 14)     </button>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 15)   )
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 16) }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  1) 'use client'
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  2) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  3) import React, { useCallback, useEffect, useState } from 'react'
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  4) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  5) export default function LinkedInLinkPopup({ onLinked }) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  6)   const [linking, setLinking] = useState(false)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  7) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  8)   const openPopup = useCallback(() => {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  9)     const width = 600
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 10)     const height = 700
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 11)     const left = (window.screen.width / 2) - (width / 2)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 12)     const top = (window.screen.height / 2) - (height / 2)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 13)     const popup = window.open(`/api/auth/linkedin/start?popup=1`, 'linkedin_popup', `width=${width},height=${height},top=${top},left=${left}`)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 14) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 15)     if (!popup) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 16)       alert('Popup blocked. Please allow popups for this site.')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 17)       return
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 18)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 19) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 20)     setLinking(true)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 21) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 22)     function handleMessage(event) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 23)       // Only accept messages from same origin
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 24)       if (event.origin !== window.location.origin) return
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 25)       const data = event.data || {}
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 26)       if (data.linkedinAccessToken) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 27)         // Exchange token with our server to link to the logged-in user
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 28)         const token = localStorage.getItem('token')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 29)         if (!token) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 30)           alert('You must be logged in to link accounts')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 31)           setLinking(false)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 32)           return
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 33)         }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 34) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 35)         fetch('/api/auth/linkedin/link', {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 36)           method: 'POST',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 37)           headers: {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 38)             'Content-Type': 'application/json',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 39)             'Authorization': `Bearer ${token}`
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 40)           },
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 41)           body: JSON.stringify({ accessToken: data.linkedinAccessToken })
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 42)         }).then(res => res.json()).then(result => {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 43)           setLinking(false)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 44)           if (result?.message) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 45)             if (onLinked) onLinked(result)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 46)             alert('LinkedIn account linked successfully')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 47)           } else {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 48)             alert('Failed to link LinkedIn account')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 49)           }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 50)         }).catch(err => {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 51)           console.error(err)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 52)           setLinking(false)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 53)           alert('Linking failed')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 54)         })
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 55)       }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 56)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 57) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 58)     window.addEventListener('message', handleMessage, { once: true })
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 59)   }, [onLinked])
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 60) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 61)   return (
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 62)     <button onClick={openPopup} className="px-3 py-1 bg-blue-600 text-white rounded">
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 63)       {linking ? 'Linking...' : 'Link LinkedIn'}
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 64)     </button>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 65)   )
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 66) }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  1) 'use client'
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  2) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  3) import React, { useState } from 'react'
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  4) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  5) export default function LinkedInMockLink({ onLinked }) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  6)   const [loading, setLoading] = useState(false)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  7) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  8)   const handleMockLink = async () => {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400  9)     if (typeof window === 'undefined') return
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 10)     const token = localStorage.getItem('token')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 11)     if (!token) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 12)       alert('You must be logged in to link')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 13)       return
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 14)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 15) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 16)     setLoading(true)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 17)     try {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 18)       const fake = {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 19)         linkedinId: 'mock-' + Math.random().toString(36).slice(2, 9),
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 20)         name: 'Mock LinkedIn User',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 21)         email: 'mock+' + Math.random().toString(36).slice(2,5) + '@example.com',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 22)         profileUrl: 'https://linkedin.com/in/mock',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 23)         picture: ''
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 24)       }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 25)       const res = await fetch('/api/auth/linkedin/mock/link', {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 26)         method: 'POST',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 27)         headers: {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 28)           'Content-Type': 'application/json',
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 29)           'Authorization': `Bearer ${token}`
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 30)         },
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 31)         body: JSON.stringify(fake)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 32)       })
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 33)       const data = await res.json()
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 34)       if (res.ok) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 35)         alert('Mock LinkedIn linked')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 36)         if (onLinked) onLinked(data)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 37)       } else {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 38)         alert(data.error || 'Mock link failed')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 39)       }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 40)     } catch (err) {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 41)       console.error(err)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 42)       alert('Mock link error')
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 43)     } finally {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 44)       setLoading(false)
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 45)     }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 46)   }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 47) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 48)   // Only show on localhost or development
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 49)   if (typeof window !== 'undefined') {
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 50)     const host = window.location.host || ''
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 51)     if (!host.includes('localhost') && process.env.NODE_ENV === 'production') return null
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 52)   }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 53) 
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 54)   return (
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 55)     <button onClick={handleMockLink} className="px-3 py-1 border rounded text-sm" disabled={loading}>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 56)       {loading ? 'Linking...' : 'Mock Link LinkedIn'}
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 57)     </button>
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 58)   )
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 59) }
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  39)   // DB-stored copy of the resume (keeps a copy in MongoDB in addition to disk)
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  40)   resumeFilename: {
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  41)     type: String,
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  42)     default: null
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  43)   },
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  44)   resumeContentType: {
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  45)     type: String,
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  46)     default: null
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  47)   },
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  48)   resumeData: {
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  49)     type: Buffer,
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  50)     default: null
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  51)   },
c84fd717 (<anjaneysharma58@gmail.com> 2025-09-30 09:03:46 -0400  52)   
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 128) // LinkedIn OAuth fields
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 129) userSchema.add({
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 130)   linkedinId: { type: String, index: true, unique: false, sparse: true },
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 131)   linkedinAccessToken: { type: String, default: null },
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 132)   linkedinProfileUrl: { type: String, default: null },
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 133)   linkedinProfilePicture: { type: String, default: null }
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 134) });
1ff3e285 (<anjaneysharma58@gmail.com> 2025-10-13 20:39:40 -0400 135) 
0d39e4fe (<asharm39@vols.utk.edu> 2025-10-10 00:22:18 -0400  2) Anjaney Sharma – anjaneys – [PathFinder]
