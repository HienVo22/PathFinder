Source code lines committed by Hien Vo for Sprint 3:

================== README.md ==================
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400   1) # Pathfinder - Job Recommendation Platform
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400   2) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400   3) A full-stack web application that uses AI to match users with their perfect job opportunities.
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400   4) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400   5) ## Features
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400   6) 
af769917 (Hien Vo 2025-10-13 10:47:08 -0400   7) - User authentication (login/register)
af769917 (Hien Vo 2025-10-13 10:47:08 -0400   8) - Resume upload with drag-and-drop support
af769917 (Hien Vo 2025-10-13 10:47:08 -0400   9) - Clean, modern UI with Pathfinder branding
af769917 (Hien Vo 2025-10-13 10:47:08 -0400  10) - Dashboard for job management
af769917 (Hien Vo 2025-10-13 10:47:08 -0400  11) - AI-powered job matching (coming soon)
af769917 (Hien Vo 2025-10-13 10:47:08 -0400  12) - One-click job applications (coming soon)
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  13) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  14) ## Tech Stack
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  15) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  16) - **Frontend**: Next.js 14, React, JavaScript, Tailwind CSS
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  17) - **Backend**: Next.js API Routes, JWT Authentication, Multer (file uploads)
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  18) - **Database**: MongoDB with Mongoose ODM
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  19) - **Storage**: Local file system (with AWS S3 planned)
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  20) - **Styling**: Tailwind CSS with custom components
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  21) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  22) ## Team Setup Guide
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  23) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  24) ### Required Tools & Software
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  25) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  26) #### 1. **Code Editor**
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  27) - **VS Code** (Recommended): [Download here](https://code.visualstudio.com/)
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  28) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  29) #### 2. **Version Control**
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  30) - **Git**: [Download here](https://git-scm.com/downloads)
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  31) - **GitHub Account**: [Sign up here](https://github.com/)
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  32) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  33) #### 3. **Node.js & npm**
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  34) - **Option A - Using NVM (Recommended for macOS/Linux):**
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  35)   ```bash
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  36)   # Install NVM
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  37)   curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  38)   
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  39)   # Restart terminal or run:
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  40)   source ~/.bashrc  # or ~/.zshrc for zsh
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  41)   
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  42)   # Install latest Node.js
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  43)   nvm install --lts
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  44)   nvm use --lts
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  45)   nvm alias default 'lts/*'
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  46)   ```
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  47) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  48) - **Option B - Direct Download:**
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  49)   - Download Node.js (v18+): [https://nodejs.org/](https://nodejs.org/)
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  50)   - This includes npm automatically
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  51) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  52) ### Getting Started
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  53) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  54) #### Step 1: Clone the Repository
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  55) ```bash
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  56) # Clone the project
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  57) git clone https://github.com/HienVo22/PathFinder.git
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  58) cd PathFinder
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  59) ```
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  60) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  61) #### Step 2: Set Up Node.js (if using NVM)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  62) ```bash
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  63) # Load NVM in current session
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  64) export NVM_DIR="$HOME/.nvm"
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  65) [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  66) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  67) # Use the default Node.js version
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  68) nvm use default
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  69) 
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  70) # Verify installation
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  71) node -v  # Should show v22.x.x or similar
864c4244 (Hien Vo 2025-09-11 16:17:45 -0400  72) npm -v   # Should show v10.x.x or similar
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  73) ```
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  74) 
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  75) #### Step 3: Set Up MongoDB
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  76) ```bash
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  77) # Option A: Install MongoDB locally via Homebrew (macOS)
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  78) brew tap mongodb/brew
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  79) brew install mongodb-community
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  80) brew services start mongodb/brew/mongodb-community
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  81) 
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  82) # Option B: Use MongoDB Atlas (Cloud - Recommended)
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  83) # 1. Sign up at https://www.mongodb.com/atlas
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  84) # 2. Create a free cluster
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  85) # 3. Get your connection string
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  86) ```
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  87) 
49b925bb (Hien Vo 2025-09-24 14:10:05 -0400  88) #### Step 3.1: Install MongoDB Compass (Optional but Recommended)
49b925bb (Hien Vo 2025-09-24 14:10:05 -0400  89) ```bash
49b925bb (Hien Vo 2025-09-24 14:10:05 -0400  90) # Install MongoDB Compass for database management
49b925bb (Hien Vo 2025-09-24 14:10:05 -0400  91) brew install --cask mongodb-compass
49b925bb (Hien Vo 2025-09-24 14:10:05 -0400  92) 
49b925bb (Hien Vo 2025-09-24 14:10:05 -0400  93) # Launch MongoDB Compass
49b925bb (Hien Vo 2025-09-24 14:10:05 -0400  94) open -a "MongoDB Compass"
49b925bb (Hien Vo 2025-09-24 14:10:05 -0400  95) ```
49b925bb (Hien Vo 2025-09-24 14:10:05 -0400  96) **Note**: Connect to `mongodb://localhost:27017` in Compass to view your local database.
49b925bb (Hien Vo 2025-09-24 14:10:05 -0400  97) 
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  98) #### Step 4: Environment Configuration
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400  99) ```bash
19420aa0 (Hien Vo 2025-09-23 09:02:08 -0400 100) # Copy the example environment file

================== app/about-ai/page.js ==================
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 10)               <Link href="/" className="flex items-center space-x-2">
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 11)                 <img 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 12)                   src="/pathfinder-logo.svg" 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 13)                   alt="PathFinder Logo" 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 14)                   className="w-8 h-8"
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 15)                 />
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 16)                 <span className="text-2xl font-bold text-primary-600">Pathfinder</span>

================== app/about-us/page.js ==================
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 12)               <Link href="/" className="flex items-center space-x-2">
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 13)                 <img 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 14)                   src="/pathfinder-logo.svg" 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 15)                   alt="PathFinder Logo" 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 16)                   className="w-8 h-8"
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 17)                 />
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 18)                 <span className="text-2xl font-bold text-primary-600">Pathfinder</span>

================== app/api/auth/google/route.js ==================
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 67)     console.error('Google login error:', {
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 68)       error: error?.toString(),
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 69)       stack: error?.stack,
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 70)       name: error?.name,
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 71)       message: error?.message,
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 72)       code: error?.code
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 73)     });

================== app/api/auth/login/route.js ==================
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  1) import { NextResponse } from 'next/server'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  2) import bcrypt from 'bcryptjs'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  3) import jwt from 'jsonwebtoken'
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  4) import User from '../../../../models/User'
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  5) import connectDB from '../../../../lib/mongodb'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  6) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  7) const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  8) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  9) export async function POST(request) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 10)   try {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 11)     await connectDB()
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 12)     
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 13)     const { email, password } = await request.json()
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 14) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 15)     // Find user
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 16)     const user = await User.findOne({ email })
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 17)     if (!user) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 18)       return NextResponse.json(
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 19)         { error: 'Invalid credentials' },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 20)         { status: 401 }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 21)       )
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 22)     }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 23) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 24)     // Check password
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 25)     const isValidPassword = await bcrypt.compare(password, user.password)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 26)     if (!isValidPassword) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 27)       return NextResponse.json(
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 28)         { error: 'Invalid credentials' },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 29)         { status: 401 }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 30)       )
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 31)     }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 32) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 33)     // Create JWT token
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 34)     const token = jwt.sign(
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 35)       { userId: user._id, email: user.email },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 36)       JWT_SECRET,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 37)       { expiresIn: '7d' }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 38)     )
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 39) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 40)     return NextResponse.json({
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 41)       message: 'Login successful',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 42)       token,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 43)       user: {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 44)         id: user._id,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 45)         email: user.email,
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 46)         name: user.name,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 49)       }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 50)     })
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 51)   } catch (error) {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 52)     console.error('Login error:', error)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 53)     return NextResponse.json(
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 54)       { error: 'Internal server error' },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 55)       { status: 500 }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 56)     )
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 57)   }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 58) }

================== app/api/auth/me/route.js ==================
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  1) import { NextResponse } from 'next/server'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  2) import jwt from 'jsonwebtoken'
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  3) import User from '../../../../models/User'
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  4) import connectDB from '../../../../lib/mongodb'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  5) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  6) const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  7) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  8) export async function GET(request) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  9)   try {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 10)     await connectDB()
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 11)     
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 12)     const token = request.headers.get('authorization')?.replace('Bearer ', '')
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 13)     
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 14)     if (!token) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 15)       return NextResponse.json(
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 16)         { error: 'No token provided' },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 17)         { status: 401 }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 18)       )
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 19)     }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 20) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 21)     const decoded = jwt.verify(token, JWT_SECRET)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 22)     
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 23)     // Fetch user from database
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 24)     const user = await User.findById(decoded.userId)
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 25)     if (!user) {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 26)       return NextResponse.json(
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 27)         { error: 'User not found' },
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 28)         { status: 404 }
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 29)       )
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 30)     }
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 31)     
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 32)     return NextResponse.json({
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 33)       user: {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 34)         id: user._id,
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 35)         email: user.email,
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 36)         name: user.name,
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 38)         resumeUrl: user.resumeUrl,
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 39)         resumeOriginalName: user.resumeOriginalName,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 42)       }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 43)     })
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 44)   } catch (error) {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 45)     console.error('Get user error:', error)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 46)     return NextResponse.json(
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 47)       { error: 'Invalid token' },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 48)       { status: 401 }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 49)     )
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 50)   }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 51) }

================== app/api/auth/register/route.js ==================
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  1) import { NextResponse } from 'next/server'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  2) import bcrypt from 'bcryptjs'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  3) import jwt from 'jsonwebtoken'
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  4) import User from '../../../../models/User'
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  5) import connectDB from '../../../../lib/mongodb'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  6) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  7) const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  8) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  9) export async function POST(request) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 10)   try {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 11)     await connectDB()
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 12)     
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 13)     const { name, email, password } = await request.json()
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 14) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 15)     // Check if user already exists
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 16)     const existingUser = await User.findOne({ email })
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 17)     if (existingUser) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 18)       return NextResponse.json(
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 19)         { error: 'User already exists' },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 20)         { status: 400 }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 21)       )
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 22)     }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 23) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 24)     // Hash password
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 25)     const hashedPassword = await bcrypt.hash(password, 10)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 26) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 27)     // Create new user
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 28)     const newUser = new User({
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 29)       email,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 30)       password: hashedPassword,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 31)       name
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 32)     })
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 33) 
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 34)     await newUser.save()
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 35) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 36)     // Create JWT token
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 37)     const token = jwt.sign(
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 38)       { userId: newUser._id, email: newUser.email },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 39)       JWT_SECRET,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 40)       { expiresIn: '7d' }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 41)     )
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 42) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 43)     return NextResponse.json({
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 44)       message: 'Registration successful',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 45)       token,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 46)       user: {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 47)         id: newUser._id,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 48)         email: newUser.email,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 49)         name: newUser.name
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 50)       }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 51)     })
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 52)   } catch (error) {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 53)     console.error('Registration error:', error)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 54)     return NextResponse.json(
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 55)       { error: 'Internal server error' },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 56)       { status: 500 }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 57)     )
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 58)   }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 59) }

================== app/api/jobs/search/route.js ==================
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   1) import { NextResponse } from 'next/server';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   2) import { SKILLS_DATABASE } from '../../../../data/skills';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   3) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   4) export async function GET(request) {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   5)   try {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   6)     const { searchParams } = new URL(request.url);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   7)     
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   8)     // Extract parameters from query string
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   9)     const query = searchParams.get('query') || 'software developer';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  10)     const location = searchParams.get('location') || '';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  11)     const page = searchParams.get('page') || '1';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  12)     const numPages = searchParams.get('num_pages') || '10';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  13)     const employmentTypes = searchParams.get('employment_types') || '';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  14)     const remoteJobsOnly = searchParams.get('remote_jobs_only') || 'false';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  15)     
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  16)     // Check if we have API credentials
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  17)     if (!process.env.RAPIDAPI_KEY) {
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  18)       console.error('RAPIDAPI_KEY not found in environment variables');
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  19)       return NextResponse.json({ 
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  20)         success: false,
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  21)         error: 'API credentials not configured',
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  22)         message: 'RAPIDAPI_KEY environment variable is missing'
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  23)       }, { status: 500 });
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  24)     }
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  25) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  26)     // Build JSearch API request
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  27)     const params = new URLSearchParams({
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  28)       query: query,
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  29)       page: page,
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  30)       num_pages: numPages,
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  31)     });
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  32) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  33)     if (location) params.append('location', location);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  34)     if (employmentTypes) params.append('employment_types', employmentTypes);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  35)     if (remoteJobsOnly === 'true') params.append('remote_jobs_only', 'true');
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  36) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  37)     const options = {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  38)       method: 'GET',
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  39)       headers: {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  40)         'X-RapidAPI-Key': process.env.RAPIDAPI_KEY,
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  41)         'X-RapidAPI-Host': process.env.RAPIDAPI_HOST || 'jsearch.p.rapidapi.com'
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  42)       }
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  43)     };
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  44) 
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  45)     console.log('Making JSearch API request:', `https://${process.env.RAPIDAPI_HOST}/search?${params.toString()}`);
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  46) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  47)     const response = await fetch(
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  48)       `https://${process.env.RAPIDAPI_HOST}/search?${params.toString()}`,
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  49)       options
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  50)     );
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  51) 
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  52)     console.log('JSearch API response status:', response.status, response.statusText);
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  53) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  54)     if (!response.ok) {
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  55)       const errorText = await response.text();
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  56)       console.error('JSearch API error response:', errorText);
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  57)       
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  58)       // If rate limited, return mock data in development
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  59)       if (response.status === 429) {
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  60)         if (process.env.NODE_ENV === 'development') {
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  61)           console.log('🔄 Rate limited - returning mock JSearch data for development');
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  62)           return getMockJSearchResponse(query, location);
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  63)         }
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  64)         return NextResponse.json({ 
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  65)           success: false,
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  66)           error: 'Rate limit exceeded',
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  67)           message: 'JSearch API rate limit exceeded. Please try again later.',
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  68)           rateLimited: true
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  69)         }, { status: 429 });
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  70)       }
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  71)       
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  72)       throw new Error(`JSearch API error: ${response.status} ${response.statusText}`);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  73)     }
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  74) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  75)     const data = await response.json();
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  76)     console.log('JSearch API returned', data.data?.length || 0, 'jobs');
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  77)     
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  78)     // Transform JSearch response to match your job format
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  79)     const jobs = (data.data || []).map((job) => ({
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  80)       // Basic Info
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  81)       id: job.job_id || `jsearch-${Math.random()}`,
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  82)       title: job.job_title,
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  83)       company: job.employer_name,
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  84)       companyLogo: job.employer_logo,
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  85)       
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  86)       // Location
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  87)       location: job.job_city && job.job_state 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  88)         ? `${job.job_city}, ${job.job_state}` 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  89)         : job.job_country || 'Location not specified',
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  90)       locationType: job.job_is_remote ? 'Remote' : (job.job_employment_type?.includes('hybrid') ? 'Hybrid' : 'On-site'),
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  91)       remote: job.job_is_remote || false,
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  92)       
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  93)       // Employment
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  94)       type: job.job_employment_type || 'Full-time',
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  95)       salary: job.job_min_salary && job.job_max_salary
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  96)         ? `$${job.job_min_salary.toLocaleString()} - $${job.job_max_salary.toLocaleString()}`
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  97)         : job.job_salary_period ? `Salary: ${job.job_salary_period}` : 'Salary not specified',
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  98)       
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  99)       // Description & Details
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 100)       description: job.job_description || '',

================== app/api/upload/resume/route.js ==================
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400   1) import { NextRequest, NextResponse } from 'next/server';
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400   2) import multer from 'multer';
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400   3) import path from 'path';
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400   4) import fs from 'fs';
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400   5) import { v4 as uuidv4 } from 'uuid';
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400   6) import jwt from 'jsonwebtoken';
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400   7) import User from '../../../../models/User';
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400   8) import connectDB from '../../../../lib/mongodb';
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400   9) import { ResumeProcessingService } from '../../../../services/resumeProcessingService';
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  11) 
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  12) // Configure upload directory
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  13) const uploadDir = path.join(process.cwd(), 'uploads', 'resumes');
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  14) 
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  15) // Ensure upload directory exists with proper permissions
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  16) try {
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  17)   if (!fs.existsSync(uploadDir)) {
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  18)     fs.mkdirSync(uploadDir, { recursive: true, mode: 0o755 });
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  19)   } else {
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  20)     // Update permissions if directory exists
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  21)     fs.chmodSync(uploadDir, 0o755);
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  22)   }
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  23) } catch (error) {
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  24)   console.error('Error setting up upload directory:', error);
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  25) }
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  26) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  27) // Verify JWT token
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  28) function verifyToken(token) {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  29)   try {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  30)     return jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  31)   } catch (error) {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  32)     return null;
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  33)   }
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  34) }
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  35) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  36) export async function POST(request) {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  37)   try {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  38)     // Get authorization header
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  39)     const authHeader = request.headers.get('authorization');
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  40)     if (!authHeader || !authHeader.startsWith('Bearer ')) {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  41)       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  42)     }
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  43) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  44)     const token = authHeader.substring(7);
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  45)     const decoded = verifyToken(token);
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  46)     if (!decoded) {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  47)       return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  48)     }
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  49) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  50)     // Connect to database
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  51)     await connectDB();
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  52) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  53)     // Parse the form data
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  54)     const formData = await request.formData();
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  55)     const file = formData.get('resume');
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  56)     
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  57)     if (!file) {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  58)       return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  59)     }
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  60) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  61)     // Validate file type and size
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  62)     const allowedTypes = [
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  63)       'application/pdf',
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  64)       'application/msword',
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  65)       'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  66)     ];
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  67) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  68)     if (!allowedTypes.includes(file.type)) {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  69)       return NextResponse.json({ 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  70)         error: 'Invalid file type. Only PDF, DOC, and DOCX files are allowed.' 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  71)       }, { status: 400 });
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  72)     }
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  73) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  74)     if (file.size > 10 * 1024 * 1024) {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  75)       return NextResponse.json({ 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  76)         error: 'File size too large. Maximum size is 10MB.' 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  77)       }, { status: 400 });
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  78)     }
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  79) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  80)     // Generate unique filename
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  81)     const uniqueId = uuidv4();
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  82)     const extension = path.extname(file.name);
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  83)     const filename = `${uniqueId}${extension}`;
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  84)     const filePath = path.join(uploadDir, filename);
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  85) 
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  86)   // Save file to disk with proper error handling
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  87)   let buffer;
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  88)   try {
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  89)     const bytes = await file.arrayBuffer();
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  90)     buffer = Buffer.from(bytes);
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  91)     
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  92)     // Write file with proper permissions
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  93)     await fs.promises.writeFile(filePath, buffer, { mode: 0o644 });
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  94)     
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  95)     // Double-check file was written
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  96)     if (!fs.existsSync(filePath)) {
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  97)       throw new Error('File was not written successfully');
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  98)     }
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  99)   } catch (writeError) {
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400 100)     console.error('Error writing file:', writeError);
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400 101)     throw new Error('Failed to save file to disk');

================== app/api/user/preferences/route.js ==================
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   1) import { NextResponse } from 'next/server';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   2) import jwt from 'jsonwebtoken';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   3) import connectDB from '../../../../lib/mongodb';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   4) import User from '../../../../models/User';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   5) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   6) function verifyToken(token) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   7)   try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   8)     return jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   9)   } catch (error) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  10)     return null;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  11)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  12) }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  13) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  14) export async function GET(request) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  15)   try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  16)     const authHeader = request.headers.get('authorization');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  17)     if (!authHeader || !authHeader.startsWith('Bearer ')) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  18)       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  19)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  20)     const token = authHeader.substring(7);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  21)     const decoded = verifyToken(token);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  22)     if (!decoded) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  23)       return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  24)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  25) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  26)     await connectDB();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  27)     const user = await User.findById(decoded.userId).lean();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  28)     if (!user) return NextResponse.json({ error: 'User not found' }, { status: 404 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  29) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  30)     return NextResponse.json({ preferences: user.jobPreferences || {} });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  31)   } catch (error) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  32)     console.error('GET /api/user/preferences error:', error);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  33)     return NextResponse.json({ error: 'Failed to load preferences' }, { status: 500 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  34)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  35) }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  36) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  37) export async function POST(request) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  38)   try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  39)     const authHeader = request.headers.get('authorization');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  40)     if (!authHeader || !authHeader.startsWith('Bearer ')) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  41)       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  42)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  43)     const token = authHeader.substring(7);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  44)     const decoded = verifyToken(token);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  45)     if (!decoded) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  46)       return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  47)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  48) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  49)     const body = await request.json();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  50)     const { preferences } = body || {};
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  51)     await connectDB();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  52)     const user = await User.findById(decoded.userId);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  53)     if (!user) return NextResponse.json({ error: 'User not found' }, { status: 404 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  54) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  55)     // Sanitize incoming preferences: only set defined keys
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  56)     const clean = {};
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  57)     if (preferences) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  58)       if (Array.isArray(preferences.jobTitles)) clean.jobTitles = preferences.jobTitles;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  59)       if (Array.isArray(preferences.locationTypes)) clean.locationTypes = preferences.locationTypes;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  60)       if (Array.isArray(preferences.locations)) clean.locations = preferences.locations;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  61)       if (Array.isArray(preferences.employmentTypes)) clean.employmentTypes = preferences.employmentTypes;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  62)       if (typeof preferences.desiredPay === 'string') clean.desiredPay = preferences.desiredPay;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  63)       if (typeof preferences.location === 'string') clean.location = preferences.location;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  64)       if (typeof preferences.jobType === 'string') clean.jobType = preferences.jobType;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  65)       if (typeof preferences.remotePreference === 'string') clean.remotePreference = preferences.remotePreference;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  66)       if (preferences.salaryRange && (typeof preferences.salaryRange.min === 'number' || typeof preferences.salaryRange.max === 'number')) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  67)         clean.salaryRange = { min: preferences.salaryRange.min, max: preferences.salaryRange.max };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  68)       }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  69)       if (typeof preferences.minSalary === 'number') clean.minSalary = preferences.minSalary;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  70)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  71) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  72)     // Ensure nested object exists
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  73)     if (!user.jobPreferences) user.jobPreferences = {};
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  74) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  75)     // Apply updates field-by-field to avoid casting undefined subdocuments
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  76)     const assignIfDefined = (key, val) => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  77)       if (val !== undefined) user.set(`jobPreferences.${key}`, val);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  78)     };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  79) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  80)     assignIfDefined('jobTitles', clean.jobTitles);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  81)     assignIfDefined('locationTypes', clean.locationTypes);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  82)     assignIfDefined('locations', clean.locations);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  83)     assignIfDefined('employmentTypes', clean.employmentTypes);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  84)     assignIfDefined('desiredPay', clean.desiredPay);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  85)     assignIfDefined('location', clean.location);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  86)     assignIfDefined('jobType', clean.jobType);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  87)     assignIfDefined('remotePreference', clean.remotePreference);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  88)     if (clean.salaryRange) assignIfDefined('salaryRange', clean.salaryRange);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  89)     if (clean.minSalary !== undefined) assignIfDefined('minSalary', clean.minSalary);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  90) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  91)     await user.save();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  92) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  93)     return NextResponse.json({ message: 'Preferences saved', preferences: user.jobPreferences });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  94)   } catch (error) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  95)     console.error('POST /api/user/preferences error:', error);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  96)     return NextResponse.json({ error: 'Failed to save preferences' }, { status: 500 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  97)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  98) }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  99) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 100) 

================== app/api/user/resume-parsing-status/route.js ==================
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  1) import { NextRequest, NextResponse } from 'next/server';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  2) import jwt from 'jsonwebtoken';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  3) import { ResumeProcessingService } from '../../../../services/resumeProcessingService.js';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  4) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  5) // Verify JWT token
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  6) function verifyToken(token) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  7)   try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  8)     return jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  9)   } catch (error) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 10)     return null;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 11)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 12) }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 13) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 14) export async function GET(request) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 15)   try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 16)     // Get authorization header
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 17)     const authHeader = request.headers.get('authorization');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 18)     if (!authHeader || !authHeader.startsWith('Bearer ')) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 19)       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 20)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 21) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 22)     const token = authHeader.substring(7);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 23)     const decoded = verifyToken(token);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 24)     if (!decoded) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 25)       return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 26)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 27) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 28)     // Get parsing status using service
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 29)     const statusData = await ResumeProcessingService.getParsingStatus(decoded.userId);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 30)     return NextResponse.json(statusData);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 31) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 32)   } catch (error) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 33)     console.error('Resume parsing status error:', error);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 34)     
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 35)     if (error.message === 'User not found') {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 36)       return NextResponse.json({ error: 'User not found' }, { status: 404 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 37)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 38)     
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 39)     return NextResponse.json({ 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 40)       error: 'Failed to get resume parsing status' 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 41)     }, { status: 500 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 42)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 43) }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 44) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 45) // Allow users to manually trigger re-parsing
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 46) export async function POST(request) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 47)   try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 48)     // Get authorization header
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 49)     const authHeader = request.headers.get('authorization');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 50)     if (!authHeader || !authHeader.startsWith('Bearer ')) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 51)       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 52)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 53) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 54)     const token = authHeader.substring(7);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 55)     const decoded = verifyToken(token);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 56)     if (!decoded) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 57)       return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 58)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 59) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 60)     // Get current status to find resume info
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 61)     const statusData = await ResumeProcessingService.getParsingStatus(decoded.userId);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 62)     
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 63)     if (!statusData.hasResume) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 64)       return NextResponse.json({ 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 65)         error: 'No resume found to reparse' 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 66)       }, { status: 400 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 67)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 68) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 69)     // Trigger re-parsing (this will need to be implemented in the service)
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 70)     // For now, we'll return a message that it's not implemented
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 71)     return NextResponse.json({
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 72)       message: 'Manual re-parsing not yet implemented',
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 73)       status: 'not_implemented'
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 74)     });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 75) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 76)   } catch (error) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 77)     console.error('Manual reparse trigger error:', error);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 78)     return NextResponse.json({ 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 79)       error: 'Failed to trigger re-parsing' 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 80)     }, { status: 500 });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 81)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 82) }

================== app/api/user/resume-status/route.js ==================
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   1) import { NextResponse } from 'next/server';
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   2) import jwt from 'jsonwebtoken';
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   3) import User from '../../../../models/User';
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   4) import connectDB from '../../../../lib/mongodb';
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   5) import fs from 'fs';
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   6) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   7) // Verify JWT token
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   8) function verifyToken(token) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   9)   try {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  10)     return jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  11)   } catch (error) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  12)     return null;
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  13)   }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  14) }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  15) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  16) export async function GET(request) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  17)   try {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  18)     // Get authorization header
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  19)     const authHeader = request.headers.get('authorization');
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  20)     if (!authHeader || !authHeader.startsWith('Bearer ')) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  21)       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  22)     }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  23) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  24)     const token = authHeader.substring(7);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  25)     const decoded = verifyToken(token);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  26)     if (!decoded) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  27)       return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  28)     }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  29) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  30)     // Connect to database
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  31)     await connectDB();
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  32) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  33)     // Find user and return resume status
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  34)     const user = await User.findById(decoded.userId);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  35)     if (!user) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  36)       return NextResponse.json({ error: 'User not found' }, { status: 404 });
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  37)     }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  38) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  39)     return NextResponse.json({
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  41)       resumeInfo: {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  42)         resumePath: user.resumePath,
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  44)         resumeOriginalName: user.resumeOriginalName,
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  45)         resumeUploadedAt: user.resumeUploadedAt,
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  48)       },
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  49)       userInfo: {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  50)         id: user._id,
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  51)         name: user.name,
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  52)         email: user.email
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  53)       }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  54)     });
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  55) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  56)   } catch (error) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  57)     console.error('Resume status check error:', error);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  58)     return NextResponse.json({ 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  59)       error: 'Could not check resume status' 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  60)     }, { status: 500 });
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  61)   }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  62) }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  63) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  64) export async function DELETE(request) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  65)   try {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  66)     // Get authorization header
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  67)     const authHeader = request.headers.get('authorization');
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  68)     if (!authHeader || !authHeader.startsWith('Bearer ')) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  69)       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  70)     }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  71) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  72)     const token = authHeader.substring(7);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  73)     const decoded = verifyToken(token);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  74)     if (!decoded) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  75)       return NextResponse.json({ error: 'Invalid token' }, { status: 401 });
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  76)     }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  77) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  78)     // Connect to database
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  79)     await connectDB();
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  80) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  81)     // Find user
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  82)     const user = await User.findById(decoded.userId);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  83)     if (!user) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  84)       return NextResponse.json({ error: 'User not found' }, { status: 404 });
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  85)     }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  86) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  87)     // Check if user has a resume
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  88)     if (!user.resumePath) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  89)       return NextResponse.json({ error: 'No resume to delete' }, { status: 400 });
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  90)     }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  91) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  92)     // Delete the resume file
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  93)     if (fs.existsSync(user.resumePath)) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  94)       try {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  95)         fs.unlinkSync(user.resumePath);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  96)       } catch (error) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  97)         console.error('Could not delete resume file:', error);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  98)         return NextResponse.json({ error: 'Failed to delete resume file' }, { status: 500 });
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  99)       }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 100)     }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 101) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 110) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 111)     return NextResponse.json({ message: 'Resume deleted successfully' });
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 112) 

================== app/dashboard/page.js ==================
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400   1) 'use client'
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400   2) 
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400   3) import { useAuth } from '@/contexts/AuthContext'
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400   4) import { useRouter } from 'next/navigation'
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400   5) import { useEffect, useRef, useState } from 'react'
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400   6) import { toast } from 'react-hot-toast'
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400   7) import ResumeUpload from '@/components/ResumeUpload'
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   8) import ResumeStatus from '@/components/ResumeStatus'
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400   9) import JobMatching from '@/components/JobMatching'
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400  10) import JobPreferences from '@/components/JobPreferences'
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  11) import ProcessingSuccessModal from '@/components/ProcessingSuccessModal'
92a5bd6b (Hien Vo        2025-10-28 00:01:18 -0400  12) import UserDropdown from '@/components/UserDropdown'
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  13) 
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  14) export default function Dashboard() {
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  15)   const { user, logout, loading } = useAuth()
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  16)   const router = useRouter()
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400  17)   const resumeStatusRef = useRef(null)
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400  18)   const [activeTab, setActiveTab] = useState('overview')
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  19)   const [showSuccessModal, setShowSuccessModal] = useState(false)
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  20)   const [uploadedFileName, setUploadedFileName] = useState('')
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400  21) 
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400  22)   // Handle successful resume upload
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400  23)   const handleUploadSuccess = (result) => {
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400  24)     console.log('Resume uploaded successfully:', result);
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400  25)     // Refresh the resume status component
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400  26)     if (resumeStatusRef.current) {
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400  27)       resumeStatusRef.current.refreshStatus();
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400  28)     }
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  29)     toast.success('Resume uploaded successfully! Processing your document...');
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  30)   }
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  31) 
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  32)   // Handle showing the modal after upload
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  33)   const handleShowModal = (fileInfo) => {
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  34)     setUploadedFileName(fileInfo.name);
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  35)     setShowSuccessModal(true);
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  36)   }
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  37) 
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  38)   // Handle resume processing completion
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  39)   const handleProcessingComplete = (result) => {
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  40)     console.log('Processing completion result:', result);
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  41)     
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  42)     if (result.parsing?.completed) {
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  43)       toast.success('Resume processing complete! Your skills have been extracted.');
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  44)     } else if (result.parsing?.failed) {
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  45)       toast.error(result.error || 'Resume processing failed. Please try uploading again.');
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  46)     } else if (result.error) {
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  47)       toast.error(result.error);
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  48)     } else {
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  49)       toast.error('Resume processing took longer than expected. Please check back in a few minutes.');
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  50)     }
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  51)   }
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  52) 
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  53)   // Handle viewing job matches
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  54)   const handleViewJobs = () => {
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  55)     setShowSuccessModal(false);
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  56)     setActiveTab('jobs');
e7583535 (Hien Vo        2025-09-24 16:18:43 -0400  57)   }
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  58) 
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  59)   useEffect(() => {
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  60)     if (!loading && !user) {
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  61)       router.push('/')
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  62)     }
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  63)   }, [user, loading, router])
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  64) 
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  65)   if (loading) {
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  66)     return (
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  67)       <div className="min-h-screen flex items-center justify-center">
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  68)         <div className="text-center">
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  71)         </div>
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  72)       </div>
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  73)     )
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  74)   }
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  75) 
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  76)   if (!user) {
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  77)     return null
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  78)   }
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  79) 
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  80)   return (
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  82)       <ProcessingSuccessModal
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  83)         isOpen={showSuccessModal}
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  84)         onClose={() => setShowSuccessModal(false)}
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  85)         onViewJobs={handleViewJobs}
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  86)         uploadedFileName={uploadedFileName}
4db04d7d (Hien Vo        2025-10-26 19:21:44 -0400  87)       />
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  88)       {/* Header */}
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  90)         <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  91)           <div className="flex justify-between items-center py-6">
a84447ad (Hien Vo        2025-10-27 23:38:15 -0400  92)             <div className="flex items-center space-x-2">
a84447ad (Hien Vo        2025-10-27 23:38:15 -0400  93)               <img 
a84447ad (Hien Vo        2025-10-27 23:38:15 -0400  94)                 src="/pathfinder-logo.svg" 
a84447ad (Hien Vo        2025-10-27 23:38:15 -0400  95)                 alt="PathFinder Logo" 
a84447ad (Hien Vo        2025-10-27 23:38:15 -0400  96)                 className="w-8 h-8"
a84447ad (Hien Vo        2025-10-27 23:38:15 -0400  97)               />
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400  98)               <h1 className="text-2xl font-bold text-primary-600">
a84447ad (Hien Vo        2025-10-27 23:38:15 -0400  99)                 Pathfinder
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400 100)               </h1>
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400 101)             </div>
92a5bd6b (Hien Vo        2025-10-28 00:01:18 -0400 102)             <div className="flex items-center">
92a5bd6b (Hien Vo        2025-10-28 00:01:18 -0400 103)               <UserDropdown user={user} onLogout={logout} />
^7ff844a (Hien Vo        2025-09-11 15:57:12 -0400 104)             </div>

================== app/layout.js ==================
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  1) import { Inter } from 'next/font/google'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  2) import './globals.css'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  3) import { AuthProvider } from '@/contexts/AuthContext'
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  5) import { Toaster } from 'react-hot-toast'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  6) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  7) const inter = Inter({ subsets: ['latin'] })
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  8) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  9) export const metadata = {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 10)   title: 'Pathfinder - Job Recommendation Platform',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 11)   description: 'Find your perfect job with AI-powered recommendations',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 12) }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 13) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 14) export default function RootLayout({ children }) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 15)   return (
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 17)       <body className={inter.className}>
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 20)             <Toaster position="top-right" />
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 24)       </body>
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 25)     </html>
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 26)   )
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 27) }

================== app/login/page.js ==================
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400  76)           <div className="flex justify-center mb-6">
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400  77)             <img 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400  78)               src="/pathfinder-logo.svg" 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400  79)               alt="PathFinder Logo" 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400  80)               className="w-24 h-24"
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400  81)             />
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400  82)           </div>
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400  83)           <h1 className="text-4xl md:text-5xl font-bold text-primary-600 mb-4">Pathfinder</h1>

================== app/page.js ==================
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  1) import Link from 'next/link'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  2) 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 11)               <Link href="/" className="flex items-center space-x-2">
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 12)                 <img 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 13)                   src="/pathfinder-logo.svg" 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 14)                   alt="PathFinder Logo" 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 15)                   className="w-8 h-8"
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 16)                 />
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 17)                 <span className="text-2xl font-bold text-primary-600">Pathfinder</span>
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 33) 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 34)       {/* Header Section with Logo */}
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 36)         <div className="flex justify-center mb-8">
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 37)           <img 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 38)             src="/pathfinder-logo.svg" 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 39)             alt="PathFinder Logo" 
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 40)             className="w-48 h-48"
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 41)           />
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 42)         </div>
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 44)           PATHFINDER
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 46)         <h2 className="text-2xl font-bold text-primary-600 mb-6">
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 47)           AI-POWERED JOB SEARCHING
a84447ad (Hien Vo 2025-10-27 23:38:15 -0400 48)         </h2>
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 53) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 64) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 70)         </div>
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 72)     </div>
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 73)   )
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 74) }

================== app/profile/page.js ==================
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   1) 'use client';
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   2) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   3) import { useState, useEffect } from 'react';
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   4) import { useAuth } from '@/contexts/AuthContext';
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   5) import { useRouter } from 'next/navigation';
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   6) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   7) export default function ProfilePage() {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   8)   const { user, loading } = useAuth();
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   9)   const router = useRouter();
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  10)   const [profileData, setProfileData] = useState(null);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  11)   const [dataLoading, setDataLoading] = useState(true);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  12)   const [error, setError] = useState(null);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  13) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  14)   useEffect(() => {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  15)     if (!loading && !user) {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  16)       router.push('/');
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  17)     }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  18)   }, [user, loading, router]);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  19) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  20)   useEffect(() => {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  21)     if (user) {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  22)       fetchProfileData();
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  23)     }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  24)   }, [user]);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  25) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  26)   const fetchProfileData = async () => {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  27)     try {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  28)       setDataLoading(true);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  29)       const response = await fetch('/api/user/resume-parsing-status', {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  30)         headers: {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  31)           'Authorization': `Bearer ${localStorage.getItem('token')}`
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  32)         }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  33)       });
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  34) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  35)       if (!response.ok) {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  36)         throw new Error('Failed to fetch profile data');
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  37)       }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  38) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  39)       const data = await response.json();
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  40)       setProfileData(data);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  41)     } catch (err) {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  42)       setError(err.message);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  43)     } finally {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  44)       setDataLoading(false);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  45)     }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  46)   };
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  47) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  48)   if (loading || dataLoading) {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  49)     return (
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  50)       <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  51)         <div className="max-w-4xl mx-auto px-4 py-8">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  52)           <div className="flex items-center justify-center py-12">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  53)             <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600"></div>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  54)             <span className="ml-3 text-lg">Loading profile...</span>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  55)           </div>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  56)         </div>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  57)       </div>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  58)     );
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  59)   }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  60) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  61)   if (!user) {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  62)     return null;
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  63)   }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  64) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  65)   const extractedData = profileData?.extractedData || {};
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  66)   const hasResumeData = profileData?.hasResume && profileData?.parsing?.completed;
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  67) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  68)   return (
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  69)     <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  70)       {/* Header */}
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  71)       <header className="bg-white dark:bg-gray-900 shadow-sm border-b border-gray-200 dark:border-gray-700">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  72)         <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  73)           <div className="flex justify-between items-center py-6">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  74)             <div className="flex items-center space-x-2">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  75)               <img 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  76)                 src="/pathfinder-logo.svg" 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  77)                 alt="PathFinder Logo" 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  78)                 className="w-8 h-8"
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  79)               />
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  80)               <h1 className="text-2xl font-bold text-primary-600">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  81)                 Pathfinder
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  82)               </h1>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  83)             </div>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  84)             <button
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  85)               onClick={() => router.push('/dashboard')}
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  86)               className="btn-secondary"
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  87)             >
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  88)               Back to Dashboard
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  89)             </button>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  90)           </div>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  91)         </div>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  92)       </header>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  93) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  94)       {/* Main Content */}
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  95)       <main className="max-w-4xl mx-auto px-4 py-8">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  96)         <div className="mb-8">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  97)           <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  98)             My Profile
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  99)           </h1>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400 100)           <p className="text-gray-600 dark:text-gray-300">

================== components/JobCard.js ==================
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   1) 'use client';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   2) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   3) /**
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   4)  * JobCard Component - Displays a job listing in the left sidebar
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   5)  * LinkedIn-style compact job card with match percentage
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   6)  */
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   7) export default function JobCard({ job, isSelected, onClick }) {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   8)   const matchPercentage = job.matchAnalysis?.matchPercentage || 0;
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   9)   
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  10)   // Determine match badge color based on percentage
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  11)   const getMatchColor = (percentage) => {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  12)     if (percentage >= 80) return 'bg-green-500';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  13)     if (percentage >= 60) return 'bg-blue-500';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  14)     if (percentage >= 40) return 'bg-yellow-500';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  15)     return 'bg-gray-400';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  16)   };
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  17) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  18)   return (
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  19)     <div
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  20)       onClick={onClick}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  21)       className={`
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  22)         p-4 border-b border-gray-200 dark:border-gray-700 cursor-pointer transition-colors
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  23)         ${isSelected 
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  24)           ? 'bg-blue-50 dark:bg-blue-900/20 border-l-4 border-l-blue-600' 
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  25)           : 'hover:bg-gray-50 dark:hover:bg-gray-700 border-l-4 border-l-transparent'
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  26)         }
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  27)       `}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  28)     >
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  29)       {/* Header with Company Logo and Match % */}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  30)       <div className="flex items-start justify-between mb-2">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  31)         <div className="flex items-start gap-3 flex-1 min-w-0">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  32)           {/* Company Logo */}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  33)           {job.companyLogo ? (
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  34)             <img
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  35)               src={job.companyLogo}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  36)               alt={`${job.company} logo`}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  37)               className="w-12 h-12 rounded object-contain flex-shrink-0 bg-white border border-gray-200 dark:border-gray-600"
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  38)               onError={(e) => {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  39)                 e.target.style.display = 'none';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  40)               }}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  41)             />
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  42)           ) : (
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  43)             <div className="w-12 h-12 rounded bg-gray-200 dark:bg-gray-600 flex items-center justify-center flex-shrink-0">
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  44)               <span className="text-gray-600 dark:text-gray-300 font-semibold text-lg">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  45)                 {job.company.charAt(0)}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  46)               </span>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  47)             </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  48)           )}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  49)           
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  50)           {/* Job Title and Company */}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  51)           <div className="flex-1 min-w-0">
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  52)             <h3 className="font-semibold text-gray-900 dark:text-gray-100 truncate">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  53)               {job.title}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  54)             </h3>
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  55)             <p className="text-sm text-gray-600 dark:text-gray-400 truncate">{job.company}</p>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  56)           </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  57)         </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  58)         
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  59)         {/* Match Badge */}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  60)         <div className={`
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  61)           ${getMatchColor(matchPercentage)} 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  62)           text-white text-xs font-bold px-2 py-1 rounded-full flex-shrink-0 ml-2
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  63)         `}>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  64)           {matchPercentage}%
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  65)         </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  66)       </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  67)       
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  68)       {/* Location and Job Type */}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  69)       <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400 mb-2">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  70)         <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  71)           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  72)           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  73)         </svg>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  74)         <span className="truncate">{job.location}</span>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  75)         
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  76)         {job.locationType && (
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  77)           <>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  78)             <span>•</span>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  79)             <span>{job.locationType}</span>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  80)           </>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  81)         )}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  82)       </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  83)       
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  84)       {/* Employment Type and Salary */}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  85)       <div className="flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400 mb-2">
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  86)         <span className="px-2 py-0.5 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded text-xs">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  87)           {job.type}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  88)         </span>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  89)         {job.salary && (
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  90)           <>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  91)             <span>•</span>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  92)             <span className="truncate text-xs">{job.salary}</span>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  93)           </>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  94)         )}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  95)       </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  96)       
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  97)       {/* Posted Time */}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  98)       <div className="text-xs text-gray-500 dark:text-gray-400">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  99)         {job.postedDisplay || 'Recently posted'}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 100)       </div>

================== components/JobDetail.js ==================
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   1) 'use client';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   2) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   3) import { useState } from 'react';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   4) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   5) /**
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   6)  * JobDetail Component - Displays full job details on the right side
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   7)  * LinkedIn-style detailed job view with skills insight
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   8)  */
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   9) export default function JobDetail({ job, onSkillsInsightClick }) {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  10)   const [showFullDescription, setShowFullDescription] = useState(false);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  11)   
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  12)   if (!job) {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  13)     return (
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  14)       <div className="flex items-center justify-center h-full text-gray-500 dark:text-gray-400">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  15)         <div className="text-center">
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  16)           <svg className="w-16 h-16 mx-auto mb-4 text-gray-300 dark:text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  17)             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  18)           </svg>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  19)           <p className="text-lg">Select a job to view details</p>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  20)         </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  21)       </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  22)     );
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  23)   }
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  24) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  25)   const matchPercentage = job.matchAnalysis?.matchPercentage || 0;
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  26)   const matchedSkills = [
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  27)     ...(job.matchAnalysis?.matchedRequiredSkills || []),
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  28)     ...(job.matchAnalysis?.matchedPreferredSkills || [])
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  29)   ];
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  30)   const missingSkills = [
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  31)     ...(job.matchAnalysis?.missingRequiredSkills || []),
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  32)     ...(job.matchAnalysis?.missingPreferredSkills || [])
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  33)   ];
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  34) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  35)   // Truncate description for initial view
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  36)   const descriptionLimit = 500;
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  37)   const shouldTruncate = job.description && job.description.length > descriptionLimit;
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  38)   const displayDescription = shouldTruncate && !showFullDescription
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  39)     ? job.description.slice(0, descriptionLimit) + '...'
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  40)     : job.description;
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  41) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  42)   return (
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  43)     <div className="h-full overflow-y-auto bg-white dark:bg-gray-800">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  44)       {/* Header */}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  45)       <div className="sticky top-0 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 z-10 p-6">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  46)         <div className="flex items-start justify-between">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  47)           <div className="flex-1">
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  48)             <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  49)               {job.title}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  50)             </h1>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  51)             <div className="flex items-center gap-3 mb-3">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  52)               {job.companyLogo ? (
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  53)                 <img
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  54)                   src={job.companyLogo}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  55)                   alt={`${job.company} logo`}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  56)                   className="w-10 h-10 rounded object-contain bg-white border border-gray-200 dark:border-gray-600"
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  57)                   onError={(e) => {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  58)                     e.target.style.display = 'none';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  59)                   }}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  60)                 />
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  61)               ) : (
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  62)                 <div className="w-10 h-10 rounded bg-gray-200 dark:bg-gray-600 flex items-center justify-center">
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  63)                   <span className="text-gray-600 dark:text-gray-300 font-semibold">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  64)                     {job.company.charAt(0)}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  65)                   </span>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  66)                 </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  67)               )}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  68)               <div>
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  69)                 <p className="font-semibold text-gray-900 dark:text-gray-100">{job.company}</p>
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  70)                 <p className="text-sm text-gray-600 dark:text-gray-400">{job.location}</p>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  71)               </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  72)             </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  73)             
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  74)             {/* Job Meta Info */}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  75)             <div className="flex flex-wrap gap-2 text-sm text-gray-600 dark:text-gray-400">
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  76)               <span className="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full">{job.type}</span>
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  77)               <span className="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full">{job.locationType}</span>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  78)               {job.experienceLevel && job.experienceLevel !== 'Not specified' && (
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  79)                 <span className="px-3 py-1 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full">{job.experienceLevel}</span>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  80)               )}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  81)               <span className="text-gray-500 dark:text-gray-400">{job.postedDisplay}</span>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  82)             </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  83)           </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  84)           
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  85)           {/* Match Badge - Large */}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  86)           <div className="text-center ml-4">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  87)             <div className={`
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  88)               text-3xl font-bold mb-1
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  89)               ${matchPercentage >= 80 ? 'text-green-600' : 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  90)                 matchPercentage >= 60 ? 'text-blue-600' : 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  91)                 matchPercentage >= 40 ? 'text-yellow-600' : 'text-gray-600'}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  92)             `}>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  93)               {matchPercentage}%
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  94)             </div>
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400  95)             <div className="text-xs text-gray-500 dark:text-gray-400">Match</div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  96)           </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  97)         </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  98)         
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  99)         {/* Action Buttons */}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 100)         <div className="flex gap-3 mt-4">

================== components/JobMatching.js ==================
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   7) import JobCard from './JobCard';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   8) import JobDetail from './JobDetail';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400   9) import SkillsInsightModal from './SkillsInsightModal';
4f3a5f9c (Hien Vo 2025-10-27 20:22:53 -0400  17)   const [showAllSkills, setShowAllSkills] = useState(false);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  18)   const [selectedJob, setSelectedJob] = useState(null);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  19)   const [skillsModalJob, setSkillsModalJob] = useState(null);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  27)     minSalary: null,
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  28)     query: 'software developer' // Default search query
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  31)   const [usingMockData, setUsingMockData] = useState(false);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  87)   const findMatches = async () => {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  89)       setLoading(true);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  90)       // Get job matches using the new JobMatcher (now async)
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  91)       const matches = await JobMatcher.getJobMatches(userSkills, filters);
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  93)       // Check if we're using mock data (look for mock job IDs)
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  94)       const isMockData = matches.some(job => job.id && job.id.startsWith('mock-'));
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  95)       setUsingMockData(isMockData);
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400  96)       
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  98)       const gapAnalysis = await JobMatcher.getSkillGapAnalysis(userSkills, 10);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 102)       
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 103)       // Auto-select first job
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 104)       if (matches.length > 0 && !selectedJob) {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 105)         setSelectedJob(matches[0]);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 106)       }
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 110)     } finally {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 111)       setLoading(false);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 169)     <>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 170)       {/* Skills Insight Modal */}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 171)       <SkillsInsightModal
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 172)         job={skillsModalJob}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 173)         isOpen={!!skillsModalJob}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 174)         onClose={() => setSkillsModalJob(null)}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 175)       />
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 177)       {/* Job Preferences Modal */}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400 184)       <div className="h-full flex flex-col bg-gray-50 dark:bg-gray-900">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 185)         {/* Top Header Bar */}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400 186)         <div className="bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 px-6 py-4">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 187)           <div className="flex items-center justify-between">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 188)             <div className="flex-1">
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400 189)               <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100">
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400 190)                 Top picks for you
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 191)               </h1>
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400 192)               <p className="text-gray-600 dark:text-gray-400 mt-1">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 193)                 {userSkills.length} skills matched • {jobMatches.length} jobs found
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400 194)                 {usingMockData && (
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400 195)                   <span className="ml-2 px-2 py-1 bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-300 text-xs rounded-full">
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400 196)                     Demo Data (API Rate Limited)
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400 197)                   </span>
d2e27f19 (Hien Vo 2025-10-28 08:35:31 -0400 198)                 )}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 199)               </p>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 201)             <button
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 202)               onClick={() => setIsPreferencesOpen(true)}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400 203)               className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg font-semibold hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-gray-700 dark:text-gray-300"
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 204)             >
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 205)               Preferences
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 206)             </button>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 208)         </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 210)         {/* LinkedIn-Style Split Layout */}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 211)         <div className="flex-1 flex overflow-hidden">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 212)           {/* Left Sidebar - Job Listings */}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400 213)           <div className="w-1/3 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 overflow-y-auto">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 214)             {jobMatches.length === 0 ? (
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400 215)               <div className="p-6 text-center text-gray-500 dark:text-gray-400">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 216)                 <svg className="mx-auto h-12 w-12 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 217)                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 218)                 </svg>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 219)                 <p>No job matches found.</p>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 220)                 <p className="text-sm mt-2">Try adjusting your preferences.</p>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 222)             ) : (
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 223)               jobMatches.map((job) => (
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 224)                 <JobCard
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 225)                   key={job.id}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 226)                   job={job}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 227)                   isSelected={selectedJob?.id === job.id}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 228)                   onClick={() => setSelectedJob(job)}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 229)                 />
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 230)               ))
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 231)             )}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 232)           </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 233) 
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 234)           {/* Right Side - Job Detail */}
ebcfafaa (Hien Vo 2025-10-28 08:26:33 -0400 235)           <div className="flex-1 bg-white dark:bg-gray-800">
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 236)             <JobDetail
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 237)               job={selectedJob}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 238)               onSkillsInsightClick={(job) => setSkillsModalJob(job)}
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 239)             />
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 241)         </div>
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 243)     </>

================== components/JobPreferences.js ==================

================== components/JobPreferencesModal.js ==================
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   1) 'use client';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   2) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   3) import { useState, useEffect } from 'react';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   4) import { useAuth } from '../contexts/AuthContext';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   5) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   6) const JobPreferencesModal = ({ isOpen, onClose, onSave }) => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   7)   const [jobTitles, setJobTitles] = useState([]);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   8)   const [newJobTitle, setNewJobTitle] = useState('');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   9)   const [locationTypes, setLocationTypes] = useState([]);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  10)   const [locations, setLocations] = useState([]);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  11)   const [newLocation, setNewLocation] = useState('');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  12)   const [employmentTypes, setEmploymentTypes] = useState([]);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  13)   const [desiredPay, setDesiredPay] = useState('');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  14)   const [saving, setSaving] = useState(false);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  15)   const { user } = useAuth();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  16) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  17)   // Load existing preferences from database
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  18)   useEffect(() => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  19)     if (isOpen && user) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  20)       loadPreferences();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  21)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  22)   }, [isOpen, user]);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  23) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  24)   const loadPreferences = async () => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  25)     try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  26)       const token = localStorage.getItem('token');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  27)       const response = await fetch('/api/user/preferences', {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  28)         headers: {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  29)           'Authorization': `Bearer ${token}`
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  30)         }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  31)       });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  32)       
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  33)       if (response.ok) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  34)         const data = await response.json();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  35)         if (data.preferences) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  36)           setJobTitles(data.preferences.jobTitles || []);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  37)           setLocationTypes(data.preferences.locationTypes || []);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  38)           setLocations(data.preferences.locations || []);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  39)           setEmploymentTypes(data.preferences.employmentTypes || []);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  40)           setDesiredPay(data.preferences.desiredPay || '');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  41)         }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  42)       }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  43)     } catch (error) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  44)       console.error('Error loading preferences:', error);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  45)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  46)   };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  47) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  48)   const toggleLocationType = (type) => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  49)     setLocationTypes(prev => 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  50)       prev.includes(type) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  51)         ? prev.filter(t => t !== type)
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  52)         : [...prev, type]
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  53)     );
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  54)   };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  55) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  56)   const toggleEmploymentType = (type) => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  57)     setEmploymentTypes(prev => 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  58)       prev.includes(type) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  59)         ? prev.filter(t => t !== type)
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  60)         : [...prev, type]
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  61)     );
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  62)   };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  63) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  64)   const addJobTitle = () => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  65)     if (newJobTitle.trim() && !jobTitles.includes(newJobTitle.trim())) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  66)       setJobTitles([...jobTitles, newJobTitle.trim()]);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  67)       setNewJobTitle('');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  68)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  69)   };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  70) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  71)   const removeJobTitle = (title) => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  72)     setJobTitles(jobTitles.filter(t => t !== title));
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  73)   };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  74) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  75)   const addLocation = () => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  76)     if (newLocation.trim() && !locations.includes(newLocation.trim())) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  77)       setLocations([...locations, newLocation.trim()]);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  78)       setNewLocation('');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  79)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  80)   };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  81) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  82)   const removeLocation = (location) => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  83)     setLocations(locations.filter(l => l !== location));
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  84)   };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  85) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  86)   const handleSave = async () => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  87)     setSaving(true);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  88)     try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  89)       const token = localStorage.getItem('token');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  90)       const preferences = {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  91)         jobTitles,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  92)         locationTypes,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  93)         locations,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  94)         employmentTypes,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  95)         desiredPay
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  96)       };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  97) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  98)       const response = await fetch('/api/user/preferences', {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  99)         method: 'POST',
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 100)         headers: {

================== components/ParsedResumeViewer.js ==================
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   1) 'use client';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   2) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   3) import { useState, useEffect } from 'react';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   4) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   5) const ParsedResumeViewer = () => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   6)   const [parsingData, setParsingData] = useState(null);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   7)   const [loading, setLoading] = useState(true);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   8)   const [error, setError] = useState(null);
4f3a5f9c (Hien Vo 2025-10-27 20:22:53 -0400   9)   const [showAllSkills, setShowAllSkills] = useState(false);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  10) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  11)   useEffect(() => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  12)     fetchParsingStatus();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  13)   }, []);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  14) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  15)   const fetchParsingStatus = async () => {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  16)     try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  17)       setLoading(true);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  18)       const response = await fetch('/api/user/resume-parsing-status', {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  19)         headers: {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  20)           'Authorization': `Bearer ${localStorage.getItem('token')}`
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  21)         }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  22)       });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  23) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  24)       if (!response.ok) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  25)         throw new Error('Failed to fetch parsing status');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  26)       }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  27) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  28)       const data = await response.json();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  29)       setParsingData(data);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  30)     } catch (err) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  31)       setError(err.message);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  32)     } finally {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  33)       setLoading(false);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  34)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  35)   };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  36) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  37)   if (loading) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  38)     return (
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  39)       <div className="bg-white rounded-lg shadow-md p-6">
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  40)         <h3 className="text-xl font-semibold text-gray-800 mb-4">AI Extracted Skills</h3>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  41)         <div className="flex items-center justify-center py-8">
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  42)           <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-600"></div>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  43)           <span className="ml-3 text-gray-600">Loading skills...</span>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  44)         </div>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  45)       </div>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  46)     );
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  47)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  48) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  49)   if (error) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  50)     return (
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  51)       <div className="bg-white rounded-lg shadow-md p-6">
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  52)         <h3 className="text-xl font-semibold text-gray-800 mb-4">AI Extracted Skills</h3>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  53)         <div className="p-4 bg-red-50 border border-red-200 rounded-md">
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  54)           <p className="text-red-700 text-sm">{error}</p>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  55)         </div>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  56)       </div>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  57)     );
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  58)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  59) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  60)   if (!parsingData?.hasResume) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  61)     return (
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  62)       <div className="bg-white rounded-lg shadow-md p-6">
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  63)         <h3 className="text-xl font-semibold text-gray-800 mb-4">AI Extracted Skills</h3>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  64)         <div className="p-4 bg-blue-50 border border-blue-200 rounded-md">
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  65)           <p className="text-blue-700 text-sm">
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  66)             Upload a resume to see AI-powered skill extraction!
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  67)           </p>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  68)         </div>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  69)       </div>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  70)     );
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  71)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  72) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  73)   const { parsing, extractedData, userSkills } = parsingData;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  74) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  75)   return (
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  76)     <div className="bg-white rounded-lg shadow-md p-6">
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  77)       <div className="mb-4">
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  78)         <h3 className="text-xl font-semibold text-gray-800">AI Extracted Skills</h3>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  79)       </div>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  80) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  81)       {/* Parsing Status */}
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  82)       {!parsing?.completed && (
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  83)         <div className="mb-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  84)           <p className="text-yellow-700 text-sm">
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  85)             ⏳ AI skill extraction in progress... Refresh to see results.
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  86)           </p>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  87)           <button 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  88)             onClick={fetchParsingStatus}
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  89)             className="mt-2 text-sm text-yellow-800 underline hover:text-yellow-900"
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  90)           >
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  91)             Refresh Status
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  92)           </button>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  93)         </div>
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  94)       )}
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  95) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  96)       {/* Extracted Skills */}
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  97)       {extractedData?.skills && extractedData.skills.length > 0 && (
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  98)         <div className="mb-6">
4f3a5f9c (Hien Vo 2025-10-27 20:22:53 -0400  99)           <div className="flex justify-between items-center mb-3">
4f3a5f9c (Hien Vo 2025-10-27 20:22:53 -0400 100)             <h4 className="text-sm font-semibold text-gray-700">

================== components/ProcessingSuccessModal.js ==================
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  1) 'use client';
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  2) 
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  3) export default function ProcessingSuccessModal({ isOpen, onClose, onViewJobs, uploadedFileName }) {
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  4)   if (!isOpen) return null;
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  5) 
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  6)   return (
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  7)     <div className="fixed inset-0 flex items-center justify-center z-50">
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  8)       {/* Backdrop */}
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  9)       <div className="fixed inset-0 bg-black bg-opacity-50 transition-opacity" onClick={onClose}></div>
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 10) 
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 11)       {/* Modal */}
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 12)       <div className="bg-white rounded-lg p-8 max-w-md w-full mx-4 relative z-10 transform transition-all">
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 13)         <div className="text-center">
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 14)           {/* Success Icon */}
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 15)           <div className="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100 mb-4">
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 16)             <svg className="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 17)               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 18)             </svg>
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 19)           </div>
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 20) 
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 21)           {/* Title */}
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 22)           <h3 className="text-lg leading-6 font-medium text-gray-900 mb-2">
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 23)             Resume Uploaded Successfully! 🎉
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 24)           </h3>
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 25) 
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 26)           {/* Message */}
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 27)           <div className="mt-2">
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 28)             <p className="text-sm text-gray-500">
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 29)               {uploadedFileName && <span className="font-medium block mb-2">{uploadedFileName}</span>}
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 30)               Your resume is being processed to extract skills and find matching jobs.
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 31)               Would you like to view your job matches now?
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 32)             </p>
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 33)           </div>
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 34) 
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 35)           {/* Buttons */}
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 36)           <div className="mt-6 flex flex-col sm:flex-row sm:gap-3 justify-center">
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 37)             <button
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 38)               onClick={onViewJobs}
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 39)               className="w-full sm:w-auto mb-2 sm:mb-0 inline-flex justify-center rounded-md border border-transparent px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:text-sm"
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 40)             >
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 41)               View Job Matches
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 42)             </button>
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 43)             <button
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 44)               onClick={onClose}
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 45)               className="w-full sm:w-auto inline-flex justify-center rounded-md border border-gray-300 px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:text-sm"
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 46)             >
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 47)               Close
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 48)             </button>
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 49)           </div>
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 50)         </div>
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 51)       </div>
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 52)     </div>
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 53)   );
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400 54) }

================== components/ResumeStatus.js ==================
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   1) 'use client';
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   2) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   4) import { useAuth } from '../contexts/AuthContext';
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   6) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   8)   const [resumeStatus, setResumeStatus] = useState(null);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400   9)   const [loading, setLoading] = useState(true);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  10)   const [error, setError] = useState('');
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  11)   const { user } = useAuth();
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  12) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  23)         }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  25) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  28)       }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  29) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  46)     fetchResumeStatus();
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  47)   }, [user]);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  48) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  49)   const handleRemoveResume = async () => {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  50)     if (!user) return;
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  51) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  52)     try {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  53)       const response = await fetch('/api/user/resume-status', {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  54)         method: 'DELETE',
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  55)         headers: {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  56)           'Authorization': `Bearer ${localStorage.getItem('token')}`
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  57)         }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  58)       });
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  59) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  60)       if (!response.ok) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  61)         throw new Error('Failed to delete resume');
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  62)       }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  63) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  66)       alert('Resume deleted successfully');
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  67)     } catch (err) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  68)       setError('Could not delete resume');
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  69)       console.error('Resume delete error:', err);
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  70)     }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  71)   };
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  72) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  75)   if (loading) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  76)     return (
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  80)       </div>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  81)     );
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  82)   }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  83) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  84)   if (error) {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  85)     return (
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  89)       </div>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  90)     );
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  91)   }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  92) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  93)   return (
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  96)       
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  97)       {resumeStatus?.hasResume ? (
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400  98)         <div className="space-y-3">
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 100)             <span className="text-xl mr-2">✅</span>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 101)             <span className="font-medium">Resume uploaded</span>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 102)           </div>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 103)           
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 105)             <div>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 106)               <strong>File:</strong> {resumeStatus.resumeInfo.resumeOriginalName}
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 107)             </div>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 108)             <div>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 109)               <strong>Uploaded:</strong> {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 110)                 resumeStatus.resumeInfo.resumeUploadedAt 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 111)                   ? new Date(resumeStatus.resumeInfo.resumeUploadedAt).toLocaleString('en-US', {
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 112)                       year: 'numeric',
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 113)                       month: 'long',
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 114)                       day: 'numeric',
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 115)                       hour: '2-digit',
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 116)                       minute: '2-digit',
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 117)                       second: '2-digit'
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 118)                     })
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 119)                   : 'Unknown'
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 120)               }
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 121)             </div>
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 132)                     href={`/api/upload/resume?file=${encodeURIComponent(resumeStatus.resumeInfo.resumeFilename)}&download=true`}
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 142)           </div>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 143) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 144)           <button 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 145)             onClick={handleRemoveResume}
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 146)             className="btn-secondary mt-4"
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 147)           >
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 148)             Remove Resume
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 149)           </button>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 150)         </div>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 151)       ) : (
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 152)         <div className="space-y-3">
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 154)             <span className="text-xl mr-2">⚠️</span>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 155)             <span className="font-medium">No resume uploaded</span>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 156)           </div>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 158)         </div>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 159)       )}
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 160) 
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 168)     </div>
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 169)   );
39cf1849 (Hien Vo        2025-09-24 14:42:40 -0400 173) 

================== components/ResumeUpload.js ==================
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400   1) 'use client';
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400   2) 
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400   3) import { useState, useRef } from 'react';
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400   4) import { useAuth } from '../contexts/AuthContext';
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400   6) const ResumeUpload = ({ onUploadSuccess, onProcessingComplete, onShowModal }) => {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400   7)   const [dragActive, setDragActive] = useState(false);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400   8)   const [uploading, setUploading] = useState(false);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400   9)   const [uploadProgress, setUploadProgress] = useState(0);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  10)   const [uploadedFile, setUploadedFile] = useState(null);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  11)   const [error, setError] = useState('');
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  12)   const inputRef = useRef(null);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  14) 
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  15)   const handleDrag = (e) => {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  16)     e.preventDefault();
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  17)     e.stopPropagation();
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  18)     if (e.type === "dragenter" || e.type === "dragover") {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  19)       setDragActive(true);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  20)     } else if (e.type === "dragleave") {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  21)       setDragActive(false);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  22)     }
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  23)   };
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  24) 
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  25)   const validateFile = (file) => {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  26)     const allowedTypes = [
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  27)       'application/pdf',
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  28)       'application/msword',
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  29)       'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  30)     ];
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  31)     const maxSize = 10 * 1024 * 1024; // 10MB
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  32) 
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  33)     if (!allowedTypes.includes(file.type)) {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  34)       return 'Please upload a PDF, DOC, or DOCX file';
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  35)     }
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  36) 
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  37)     if (file.size > maxSize) {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  38)       return 'File size must be less than 10MB';
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  39)     }
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  40) 
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  41)     return null;
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  42)   };
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  43) 
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  44)   const uploadFile = async (file) => {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  45)     const validationError = validateFile(file);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  46)     if (validationError) {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  47)       setError(validationError);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  48)       return;
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  49)     }
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  50) 
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  51)     setError('');
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  52)     setUploading(true);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  53)     setUploadProgress(0);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  54) 
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  55)     const formData = new FormData();
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  56)     formData.append('resume', file);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  57)     formData.append('userId', user.id);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  58) 
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  59)     try {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  60)       const response = await fetch('/api/upload/resume', {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  61)         method: 'POST',
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  62)         headers: {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  63)           'Authorization': `Bearer ${localStorage.getItem('token')}`
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  64)         },
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  65)         body: formData
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  66)       });
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  67) 
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400  68)       const result = await response.json();
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400  69)       
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  70)       if (!response.ok) {
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400  71)         throw new Error(result.error || 'Upload failed');
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  72)       }
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  73)       
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  74)       // Simulate progress for better UX
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  75)       const progressInterval = setInterval(() => {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  77)           if (prev >= 90) {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  78)             clearInterval(progressInterval);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  79)             return 90;
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  80)           }
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  81)           return prev + 10;
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  82)         });
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  83)       }, 100);
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  84) 
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  87)         setUploadProgress(100);
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400  88)         const fileInfo = {
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  89)           name: file.name,
ae7992fc (Hien Vo      2025-09-24 14:09:19 -0400  90)           path: result.filePath,
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400  93)         };
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400  94)         setUploadedFile(fileInfo);
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400  97)         // Show the modal immediately after upload
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400  98)         if (onShowModal) {
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400  99)           onShowModal(fileInfo);
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400 100)         }
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400 101)         
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400 112) 
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400 113)         // Start polling for resume processing status
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400 114)         let attempts = 0;
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400 115)         const maxAttempts = 30; // 30 seconds timeout
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400 116)         const pollInterval = setInterval(async () => {
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400 117)           attempts++;
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400 118)           try {
4db04d7d (Hien Vo      2025-10-26 19:21:44 -0400 119)             const statusResponse = await fetch('/api/user/resume-parsing-status', {

================== components/ResumeViewer.js ==================
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400   9)   const [contentType, setContentType] = useState('application/pdf');
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  10)   const [viewerUrl, setViewerUrl] = useState(null);
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  17)     const fetchFile = async () => {
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  26)         const fetchedContentType = res.headers.get('content-type') || 'application/pdf';
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  27)         setContentType(fetchedContentType);
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  28)         
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  29)         // Create blob URL for all file types
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  30)         const blob = new Blob([arrayBuffer], { type: fetchedContentType });
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  32)         
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  33)         if (mounted) {
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  34)           setBlobUrl(objectUrl);
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  35)           
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  36)           // For DOCX files, check if we can use Google Docs viewer
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  37)           if (fetchedContentType.includes('wordprocessingml') || fetchedContentType.includes('msword')) {
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  38)             // Google Docs viewer only works with publicly accessible URLs
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  39)             // For localhost/development, we'll skip the Google viewer and show a message
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  40)             const isLocalhost = window.location.hostname === 'localhost' || 
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  41)                                window.location.hostname === '127.0.0.1' || 
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  42)                                window.location.hostname.includes('localhost');
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  43)             
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  44)             if (!isLocalhost && window.location.protocol === 'https:') {
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  45)               // Only use Google Docs viewer for HTTPS production URLs
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  46)               const fileUrl = encodeURIComponent(`${window.location.origin}/api/upload/resume?file=${encodeURIComponent(resumeFilename)}`);
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  47)               setViewerUrl(`https://docs.google.com/gview?url=${fileUrl}&embedded=true`);
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  48)             } else {
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  49)               // For localhost or non-HTTPS, we'll show a fallback message
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  50)               setViewerUrl(null);
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400  51)             }
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  52)           }
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  53)         }
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  61)     fetchFile();
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  71)   const handleDownload = (e) => {
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  72)     e.preventDefault();
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  73)     e.stopPropagation();
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  74)   };
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  75) 
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  80)         <div className="flex items-center justify-between p-3 border-b bg-gray-50">
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  82)           <div className="flex gap-2">
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  83)             <a
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  84)               href={`/api/upload/resume?file=${encodeURIComponent(resumeFilename)}&download=true`}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  85)               download
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  86)               className="px-3 py-1 border rounded text-sm text-primary-600 hover:bg-primary-50"
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  87)               onClick={(e) => e.stopPropagation()}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  88)             >
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  89)               Download
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  90)             </a>
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  93)               className="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 text-sm"
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 100)         <div className="w-full h-full bg-gray-100" onContextMenu={handleDownload}>
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 103)               <div className="text-gray-500">Loading resume...</div>
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 109)           {!loading && !error && (
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 110)             <>
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 111)               {/* DOCX files - use Google Docs viewer for original formatting when available */}
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 112)               {(contentType.includes('wordprocessingml') || contentType.includes('msword')) && (
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 113)                 <>
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 114)                   {viewerUrl ? (
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 115)                     <iframe
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 116)                       src={viewerUrl}
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 117)                       title="Resume Preview"
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 118)                       className="w-full h-full border-0"
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 119)                       onContextMenu={handleDownload}
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 120)                       onLoad={() => console.log('Google Docs viewer loaded')}
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 121)                       onError={() => {
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 122)                         console.warn('Google Docs viewer failed, falling back to direct view');
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 123)                         setError('Document viewer unavailable. Please download to view the original format.');
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 124)                       }}
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 125)                     />
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 126)                   ) : (
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 127)                     <div className="w-full h-full flex flex-col items-center justify-center bg-gray-50 p-8">
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 128)                       <div className="max-w-md text-center">
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 129)                         <div className="mb-4">
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 130)                           <svg className="mx-auto h-16 w-16 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 131)                             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 132)                           </svg>
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 133)                         </div>
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 134)                         <h3 className="text-lg font-medium text-gray-900 mb-2">DOCX Preview Not Available</h3>
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 135)                         <p className="text-sm text-gray-600 mb-4">
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 136)                           Document preview is not available in development mode. 
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 137)                           Please download the file to view the original formatting.
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 138)                         </p>
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 139)                         <button
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 140)                           onClick={handleDownload}
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 141)                           className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500"
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 142)                         >
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 143)                           <svg className="mr-2 h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 144)                             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 145)                           </svg>
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 146)                           Download Resume
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 147)                         </button>
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 148)                       </div>
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 149)                     </div>
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 150)                   )}
e7a8001e (Hien Vo        2025-10-27 21:01:16 -0400 151)                 </>
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 152)               )}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 153)               
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 154)               {/* PDF files - native browser PDF viewer */}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 155)               {contentType.includes('pdf') && blobUrl && (
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 156)                 <object
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 157)                   data={blobUrl}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 158)                   type="application/pdf"
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 159)                   className="w-full h-full"

================== components/SkillsInsightModal.js ==================
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400   1) 'use client';
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400   2) 
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400   3) /**
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400   4)  * SkillsInsightModal Component - Shows detailed skill comparison
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400   5)  * Displays matched skills (with checkmarks) and missing skills (crossed out)
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400   6)  */
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400   7) export default function SkillsInsightModal({ job, isOpen, onClose }) {
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400   8)   if (!isOpen || !job) return null;
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400   9) 
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  10)   const matchedRequiredSkills = job.matchAnalysis?.matchedRequiredSkills || [];
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  11)   const matchedPreferredSkills = job.matchAnalysis?.matchedPreferredSkills || [];
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  12)   const missingRequiredSkills = job.matchAnalysis?.missingRequiredSkills || [];
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  13)   const missingPreferredSkills = job.matchAnalysis?.missingPreferredSkills || [];
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  14)   
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  15)   const totalMatched = matchedRequiredSkills.length + matchedPreferredSkills.length;
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  16)   const totalMissing = missingRequiredSkills.length + missingPreferredSkills.length;
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  17)   const matchPercentage = job.matchAnalysis?.matchPercentage || 0;
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  18) 
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  19)   return (
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  20)     <div 
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  21)       className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4"
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  22)       onClick={onClose}
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  23)     >
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  24)       <div 
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  25)         className="bg-white rounded-lg max-w-3xl w-full max-h-[90vh] overflow-y-auto"
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  26)         onClick={(e) => e.stopPropagation()}
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  27)       >
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  28)         {/* Header */}
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  29)         <div className="sticky top-0 bg-white border-b p-6 z-10">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  30)           <div className="flex items-start justify-between">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  31)             <div className="flex-1">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  32)               <h2 className="text-2xl font-bold text-gray-900 mb-1">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  33)                 Skills Insight
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  34)               </h2>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  35)               <p className="text-gray-600">{job.title} at {job.company}</p>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  36)             </div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  37)             <button
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  38)               onClick={onClose}
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  39)               className="text-gray-400 hover:text-gray-600 transition-colors"
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  40)             >
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  41)               <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  42)                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  43)               </svg>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  44)             </button>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  45)           </div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  46)           
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  47)           {/* Overall Match Stats */}
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  48)           <div className="mt-4 grid grid-cols-3 gap-4 text-center">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  49)             <div className="p-3 bg-blue-50 rounded-lg">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  50)               <div className="text-3xl font-bold text-blue-600">{matchPercentage}%</div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  51)               <div className="text-sm text-gray-600 mt-1">Overall Match</div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  52)             </div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  53)             <div className="p-3 bg-green-50 rounded-lg">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  54)               <div className="text-3xl font-bold text-green-600">{totalMatched}</div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  55)               <div className="text-sm text-gray-600 mt-1">Skills You Have</div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  56)             </div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  57)             <div className="p-3 bg-orange-50 rounded-lg">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  58)               <div className="text-3xl font-bold text-orange-600">{totalMissing}</div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  59)               <div className="text-sm text-gray-600 mt-1">Skills to Learn</div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  60)             </div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  61)           </div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  62)         </div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  63) 
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  64)         {/* Content */}
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  65)         <div className="p-6">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  66)           {/* Matched Required Skills */}
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  67)           {matchedRequiredSkills.length > 0 && (
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  68)             <div className="mb-6">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  69)               <div className="flex items-center gap-2 mb-3">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  70)                 <svg className="w-5 h-5 text-green-600" fill="currentColor" viewBox="0 0 20 20">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  71)                   <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  72)                 </svg>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  73)                 <h3 className="text-lg font-semibold text-gray-900">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  74)                   Required Skills You Have
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  75)                 </h3>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  76)                 <span className="text-sm text-gray-500">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  77)                   ({matchedRequiredSkills.length})
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  78)                 </span>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  79)               </div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  80)               <div className="flex flex-wrap gap-2">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  81)                 {matchedRequiredSkills.map((skill, idx) => (
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  82)                   <div
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  83)                     key={idx}
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  84)                     className="flex items-center gap-1.5 px-3 py-2 bg-green-100 text-green-800 rounded-lg border border-green-300"
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  85)                   >
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  86)                     <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  87)                       <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  88)                     </svg>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  89)                     <span className="font-medium">{skill}</span>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  90)                   </div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  91)                 ))}
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  92)               </div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  93)             </div>
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  94)           )}
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  95) 
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  96)           {/* Matched Preferred Skills */}
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  97)           {matchedPreferredSkills.length > 0 && (
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  98)             <div className="mb-6">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400  99)               <div className="flex items-center gap-2 mb-3">
0e34ca56 (Hien Vo           2025-10-27 21:50:32 -0400 100)                 <svg className="w-5 h-5 text-blue-600" fill="currentColor" viewBox="0 0 20 20">

================== components/UserDropdown.js ==================
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   1) 'use client';
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   2) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   3) import { useState, useRef, useEffect } from 'react';
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   4) import { useRouter } from 'next/navigation';
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   5) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   6) export default function UserDropdown({ user, onLogout }) {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   7)   const [isOpen, setIsOpen] = useState(false);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   8)   const dropdownRef = useRef(null);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400   9)   const router = useRouter();
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  10) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  11)   // Close dropdown when clicking outside
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  12)   useEffect(() => {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  13)     function handleClickOutside(event) {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  14)       if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  15)         setIsOpen(false);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  16)       }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  17)     }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  18) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  19)     document.addEventListener('mousedown', handleClickOutside);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  20)     return () => {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  21)       document.removeEventListener('mousedown', handleClickOutside);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  22)     };
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  23)   }, []);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  24) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  25)   const menuItems = [
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  26)     {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  27)       label: 'My Profile',
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  28)       icon: (
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  29)         <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  30)           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  31)         </svg>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  32)       ),
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  33)       onClick: () => {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  34)         router.push('/profile');
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  35)         setIsOpen(false);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  36)       }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  37)     },
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  38)     {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  39)       label: 'My Jobs',
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  40)       icon: (
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  41)         <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  42)           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  43)         </svg>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  44)       ),
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  45)       onClick: () => {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  46)         // Navigate to jobs tab in dashboard
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  47)         router.push('/dashboard');
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  48)         // Note: We'll need to add a way to set the active tab to 'jobs'
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  49)         setIsOpen(false);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  50)       }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  51)     },
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  52)     {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  53)       label: 'Applied Jobs',
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  54)       icon: (
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  55)         <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  56)           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  57)         </svg>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  58)       ),
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  59)       onClick: () => {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  60)         // Placeholder for applied jobs page
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  61)         alert('Applied Jobs feature coming soon!');
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  62)         setIsOpen(false);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  63)       }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  64)     },
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  65)     {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  66)       label: 'Settings',
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  67)       icon: (
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  68)         <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  69)           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z" />
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  70)           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  71)         </svg>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  72)       ),
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  73)       onClick: () => {
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  74)         router.push('/dashboard/settings');
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  75)         setIsOpen(false);
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  76)       }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  77)     }
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  78)   ];
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  79) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  80)   return (
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  81)     <div className="relative" ref={dropdownRef}>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  82)       {/* User Name Button */}
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  83)       <button
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  84)         onClick={() => setIsOpen(!isOpen)}
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  85)         className="flex items-center space-x-2 text-secondary-600 dark:text-secondary-400 hover:text-gray-900 dark:hover:text-gray-100 transition-colors"
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  86)       >
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  87)         <span className="font-medium">Welcome, {user.name}!</span>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  88)         <svg 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  89)           className={`w-4 h-4 transition-transform ${isOpen ? 'rotate-180' : ''}`} 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  90)           fill="none" 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  91)           stroke="currentColor" 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  92)           viewBox="0 0 24 24"
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  93)         >
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  94)           <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  95)         </svg>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  96)       </button>
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  97) 
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  98)       {/* Dropdown Menu */}
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400  99)       {isOpen && (
92a5bd6b (Hien Vo           2025-10-28 00:01:18 -0400 100)         <div className="absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 py-1 z-50">

================== contexts/AuthContext.js ==================
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400   1) 'use client'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400   2) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400   3) import { createContext, useContext, useState, useEffect } from 'react'
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400   5) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400   6) const AuthContext = createContext(undefined)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400   7) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400   8) export function AuthProvider({ children }) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400   9)   const [user, setUser] = useState(null)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  10)   const [loading, setLoading] = useState(true)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  12) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  13)   useEffect(() => {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  14)     const token = localStorage.getItem('token')
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  15)     if (token) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  16)       fetchUser(token)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  17)     } else {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  18)       setLoading(false)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  20)     }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  21)   }, [])
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  22) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  23)   const fetchUser = async (token) => {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  24)     try {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  25)       const response = await fetch('/api/auth/me', {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  27)       })
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  28)       
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  29)       if (response.ok) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  30)         const data = await response.json()
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  31)         setUser(data.user)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  37)       } else {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  38)         localStorage.removeItem('token')
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  40)       }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  41)     } catch (error) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  42)       console.error('Error fetching user:', error)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  43)       localStorage.removeItem('token')
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  45)     } finally {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  46)       setLoading(false)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  47)     }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  48)   }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  49) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  58)   const login = async (email, password) => {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  59)     try {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  60)       const response = await fetch('/api/auth/login', {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  61)         method: 'POST',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  63)         body: JSON.stringify({ email, password }),
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  64)       })
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  65) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  66)       if (response.ok) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  67)         const data = await response.json()
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  68)         localStorage.setItem('token', data.token)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  71)         return true
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  72)       } else {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  73)         const error = await response.json()
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  74)         alert(error.error || 'Login failed')
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  75)         return false
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  76)       }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  77)     } catch (error) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  78)       console.error('Login error:', error)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  79)       alert('Login failed. Please try again.')
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  80)       return false
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  81)     }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  82)   }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  83) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  84)   const register = async (name, email, password) => {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  85)     try {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  86)       const response = await fetch('/api/auth/register', {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  87)         method: 'POST',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  89)         body: JSON.stringify({ name, email, password }),
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  90)       })
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  91) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  92)       if (response.ok) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  93)         const data = await response.json()
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  94)         localStorage.setItem('token', data.token)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  95)         setUser(data.user)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  97)         return true
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  98)       } else {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  99)         const error = await response.json()
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 100)         alert(error.error || 'Registration failed')
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 101)         return false
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 102)       }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 103)     } catch (error) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 104)       console.error('Registration error:', error)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 105)       alert('Registration failed. Please try again.')
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 106)       return false
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 107)     }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 108)   }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 109) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 110)   const logout = () => {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 111)     localStorage.removeItem('token')
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 112)     setUser(null)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 114)   }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 115) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 140)   return (
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 142)       {children}
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 143)     </AuthContext.Provider>
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 144)   )
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 145) }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 146) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 147) export function useAuth() {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 148)   const context = useContext(AuthContext)
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 149)   if (context === undefined) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 150)     throw new Error('useAuth must be used within an AuthProvider')

================== data/jobs.js ==================
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   1) // Sample job listings for MVP job matching
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   2) export const SAMPLE_JOBS = [
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   3)   {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   4)     id: 1,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   5)     title: "Mid-Level Frontend Developer",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   6)     company: "TechStart Inc",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   7)     location: "San Francisco, CA",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   8)     locationType: "Hybrid",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   9)     remote: true,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  10)     salary: "$80,000 - $120,000",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  11)     type: "Full-time",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  12)     requiredSkills: ["JavaScript", "React", "HTML", "CSS", "Git"],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  13)     preferredSkills: ["TypeScript", "Redux", "Tailwind CSS", "Next.js"],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  14)     description: "Build modern, responsive web applications using React and modern JavaScript. We're looking for a developer with 2-4 years of experience who can work independently and contribute to complex frontend projects. Work with a dynamic team to create user-friendly interfaces that delight our customers.",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  15)     posted: "2025-01-23",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  16)     benefits: ["Health Insurance", "401k", "Remote Work", "Flexible Hours"]
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  17)   },
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  18)   {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  19)     id: 2,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  20)     title: "Senior Full Stack Developer",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  21)     company: "StartupXYZ",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  22)     location: "Remote",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  23)     locationType: "Remote",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  24)     remote: true,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  25)     salary: "$90,000 - $140,000",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  26)     type: "Full-time",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  27)     requiredSkills: ["JavaScript", "Node.js", "React", "MongoDB", "Express"],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  28)     preferredSkills: ["AWS", "Docker", "TypeScript", "Redux"],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  29)     description: "Work on both frontend and backend systems with 3-5 years of experience. Design and implement scalable web applications from database to user interface. Lead technical decisions and mentor junior developers.",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  30)     posted: "2025-01-24",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  31)     benefits: ["Health Insurance", "Stock Options", "Remote Work", "Learning Budget"]
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  32)   },
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  33)   {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  34)     id: 3,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  35)     title: "Senior Backend Engineer",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  36)     company: "DataCorp",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  37)     location: "New York, NY",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  38)     locationType: "In-Person",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  39)     remote: false,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  40)     salary: "$100,000 - $150,000",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  41)     type: "Full-time",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  42)     requiredSkills: ["Python", "Django", "PostgreSQL", "AWS", "Docker"],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  43)     preferredSkills: ["Kubernetes", "Redis", "Jenkins", "Terraform"],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  44)     description: "Design and implement scalable backend services with 4-6 years of experience. Work with microservices architecture and cloud infrastructure. Lead backend architecture decisions and optimize system performance.",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  45)     posted: "2025-01-22",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  46)     benefits: ["Health Insurance", "401k", "Gym Membership", "Catered Meals"]
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  47)   },
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  48)   {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  49)     id: 4,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  50)     title: "Junior React Developer",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  51)     company: "WebSolutions",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  52)     location: "Austin, TX",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  53)     locationType: "Hybrid",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  54)     remote: true,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  55)     salary: "$75,000 - $110,000",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  56)     type: "Full-time",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  57)     requiredSkills: ["React", "JavaScript", "CSS", "HTML", "Git"],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  58)     preferredSkills: ["TypeScript", "Styled Components", "Jest", "Webpack"],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  59)     description: "Join our frontend team to build cutting-edge React applications. Perfect for developers with 2-3 years of experience looking to grow their skills. Focus on component architecture and user experience with mentorship from senior developers.",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  60)     posted: "2025-01-24",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  61)     benefits: ["Health Insurance", "Remote Work", "Professional Development", "Flexible PTO"]
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  62)   },
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  63)   {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  64)     id: 5,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  65)     title: "Senior DevOps Engineer",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  66)     company: "CloudTech",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  67)     location: "Seattle, WA",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  68)     locationType: "Remote",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  69)     remote: true,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  70)     salary: "$110,000 - $160,000",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  71)     type: "Full-time",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  72)     requiredSkills: ["AWS", "Docker", "Kubernetes", "Jenkins", "Linux"],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  73)     preferredSkills: ["Terraform", "Ansible", "Python", "Monitoring"],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  74)     description: "Manage cloud infrastructure and deployment pipelines with 4-7 years of DevOps experience. Ensure high availability and scalability of our services. Lead infrastructure automation initiatives and mentor team members.",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  75)     posted: "2025-01-23",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  76)     benefits: ["Health Insurance", "Stock Options", "Remote Work", "Conference Budget"]
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  77)   },
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  78)   {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  79)     id: 6,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  80)     title: "Mid-Level Mobile Developer (React Native)",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  81)     company: "MobileFirst",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  82)     location: "Los Angeles, CA",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  83)     locationType: "Hybrid",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  84)     remote: false,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  85)     salary: "$85,000 - $125,000",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  86)     type: "Full-time",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  87)     requiredSkills: ["React Native", "JavaScript", "iOS", "Android", "Git"],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  88)     preferredSkills: ["TypeScript", "Redux", "Firebase", "App Store Deployment"],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  89)     description: "Develop cross-platform mobile applications using React Native with 3-5 years of mobile development experience. Work closely with design team to create beautiful mobile experiences and handle app store deployments.",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  90)     posted: "2025-01-24",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  91)     benefits: ["Health Insurance", "401k", "Gym Membership", "Team Events"]
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  92)   },
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  93)   {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  94)     id: 7,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  95)     title: "Mid-Level Python Developer",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  96)     company: "DataAnalytics Pro",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  97)     location: "Chicago, IL",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  98)     locationType: "Remote",
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  99)     remote: true,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400 100)     salary: "$80,000 - $130,000",

================== data/skills.js ==================
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400   1) // Job-focused technical skills database - only skills explicitly mentioned in job listings
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400   2) export const TECHNICAL_SKILLS = {
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400   3)   // Core Programming Languages (commonly required in job listings)
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400   4)   languages: [
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400   5)     'JavaScript', 'TypeScript', 'Python', 'Java', 'C#', 'C++',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400   6)     'PHP', 'Ruby', 'Swift', 'Kotlin', 'Go'
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400   7)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   8)   
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400   9)   // Frontend Development (key skills in frontend job listings)
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  10)   frontend: [
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  11)     'React', 'Vue.js', 'Angular', 'HTML', 'CSS',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  12)     'Redux', 'Next.js', 'Webpack', 'Tailwind CSS',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  13)     'Bootstrap', 'Material-UI', 'Sass'
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  14)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  15)   
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  16)   // Backend Development (common backend requirements)
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  17)   backend: [
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  18)     'Node.js', 'Express', 'Django', 'Flask', 'FastAPI',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  19)     'Spring Boot', '.NET', 'ASP.NET', 'GraphQL', 'REST API'
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  20)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  21)   
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  22)   // Database Technologies (frequently required)
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  23)   databases: [
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  24)     'MySQL', 'PostgreSQL', 'MongoDB', 'Redis',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  25)     'SQL Server', 'Oracle', 'Firebase'
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  26)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  27)   
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  28)   // Cloud & DevOps (key modern requirements)
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  29)   cloudDevOps: [
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  30)     'AWS', 'Azure', 'Google Cloud Platform',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  31)     'Docker', 'Kubernetes', 'Jenkins', 'GitHub Actions',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  32)     'Linux', 'Ubuntu', 'CI/CD'
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  33)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  34)   
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  35)   // Mobile Development (specific to mobile jobs)
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  36)   mobile: [
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  37)     'React Native', 'Flutter', 'Swift', 'Kotlin',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  38)     'Android SDK', 'iOS SDK'
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  39)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  40)   
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  41)   // Data Science & ML (for AI/ML positions)
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  42)   dataScienceML: [
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  43)     'Machine Learning', 'Data Structures and Algorithms', 'Computer Organization',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  44)     'Matrix Algebra', 'System Programming', 'Reinforcement Learning',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  45)     'Pandas', 'NumPy', 'TensorFlow', 'PyTorch', 'Scikit-learn', 'Matplotlib',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  46)     'FAISS', 'Computer Science'
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  47)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  48)   
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  49)   // Testing & Tools (commonly required)
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  50)   testing: [
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  51)     'Jest', 'Cypress', 'Selenium', 'JUnit',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  52)     'PyTest', 'Mocha', 'Chai'
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  53)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  54)   
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  55)   // Essential Tools (frequently mentioned)
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  56)   tools: [
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  57)     'Git', 'GitHub', 'GitLab', 'Jira',
4f3a5f9c (Hien Vo 2025-10-27 20:22:53 -0400  58)     'Postman', 'VS Code', 'Docker Compose', 'JWT',
4f3a5f9c (Hien Vo 2025-10-27 20:22:53 -0400  59)     'Jupyter Notebook'
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  60)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  61)   
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  62)   // Architecture & Patterns (high-value skills)
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  63)   architecture: [
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  64)     'Microservices', 'Serverless', 'RESTful APIs',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  65)     'WebSocket', 'System Design'
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  66)   ]
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  67) };
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  68) 
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  69) // Convert to flat array for compatibility
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  70) export const TECHNICAL_SKILLS_LIST = Object.values(TECHNICAL_SKILLS).flat();
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  71) 
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  72) // Soft skills that are valuable in tech roles
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  73) export const SOFT_SKILLS = [
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  74)   'Leadership', 'Team Leadership', 'Project Management', 'Communication',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  75)   'Problem Solving', 'Critical Thinking', 'Analytical Skills', 'Mentoring',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  76)   'Collaboration', 'Adaptability', 'Time Management', 'Decision Making',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  77)   'Creativity', 'Innovation', 'Strategic Thinking', 'Conflict Resolution',
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  78)   'Presentation Skills', 'Technical Writing', 'Code Review', 'Agile', 'Scrum'
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  79) ];
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  80) 
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  81) // Combined skills database
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  82) export const SKILLS_DATABASE = [...TECHNICAL_SKILLS_LIST, ...SOFT_SKILLS];
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400  83) 
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  84) // Skills categorized for better organization
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  85) export const SKILLS_CATEGORIES = {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  86)   frontend: [
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  87)     'JavaScript', 'TypeScript', 'React', 'Vue.js', 'Angular', 'HTML', 'CSS',
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  88)     'Sass', 'Bootstrap', 'Tailwind CSS', 'Redux', 'Next.js', 'Webpack'
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  89)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  90)   backend: [
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  91)     'Node.js', 'Express', 'Python', 'Django', 'Flask', 'Java', 'Spring',
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  92)     'PHP', 'Laravel', 'Ruby', 'Rails', 'C#', '.NET', 'Go'
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  93)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  94)   database: [
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  95)     'MySQL', 'PostgreSQL', 'MongoDB', 'Redis', 'Elasticsearch', 'DynamoDB',
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  96)     'Firebase', 'Prisma', 'Sequelize'
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  97)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  98)   cloud: [
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  99)     'AWS', 'Azure', 'GCP', 'Docker', 'Kubernetes', 'Jenkins', 'GitHub Actions',
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400 100)     'Terraform', 'Heroku', 'Vercel'

================== jsconfig.json ==================
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  1) {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  2)   "compilerOptions": {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  3)     "target": "es5",
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  4)     "lib": ["dom", "dom.iterable", "es6"],
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  5)     "allowJs": true,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  6)     "skipLibCheck": true,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  7)     "strict": false,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  8)     "noEmit": true,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  9)     "esModuleInterop": true,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 10)     "module": "esnext",
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 11)     "moduleResolution": "bundler",
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 12)     "resolveJsonModule": true,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 13)     "isolatedModules": true,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 14)     "jsx": "preserve",
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 15)     "incremental": true,
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 16)     "plugins": [
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 17)       {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 18)         "name": "next"
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 19)       }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 20)     ],
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 21)     "paths": {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 22)       "@/*": ["./*"]
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 23)     }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 24)   },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 25)   "include": ["next-env.d.ts", "**/*.js", "**/*.jsx", ".next/types/**/*.ts"],
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 26)   "exclude": ["node_modules"]
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 27) }

================== lib/mongodb.js ==================
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  1) import mongoose from 'mongoose';
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  2) 
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  4) 
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  5) if (!MONGODB_URI) {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  6)   throw new Error('Please define the MONGODB_URI environment variable inside .env.local');
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  7) }
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  8) 
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400  9) let cached = global.mongoose;
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 10) 
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 11) if (!cached) {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 12)   cached = global.mongoose = { conn: null, promise: null };
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 13) }
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 14) 
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 15) async function connectDB() {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 16)   if (cached.conn) {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 17)     return cached.conn;
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 18)   }
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 19) 
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 20)   if (!cached.promise) {
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 21)     // Use environment-specific database name
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 22)     const dbName = process.env.MONGODB_DB_NAME || 
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 23)                    (process.env.NODE_ENV === 'production' ? 'pathfinder_prod' : 
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 24)                     process.env.NODE_ENV === 'test' ? 'pathfinder_test' : 'pathfinder_dev');
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 25)     
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 26)     const opts = {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 27)       bufferCommands: false,
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 28)       dbName: dbName
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 29)     };
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 30) 
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 31)     cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 32)       return mongoose;
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 33)     });
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 34)   }
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 35) 
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 36)   try {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 37)     cached.conn = await cached.promise;
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 38)   } catch (e) {
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 39)     cached.promise = null;
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 40)     throw e;
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 41)   }
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 42) 
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 43)   return cached.conn;
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 44) }
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 45) 
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 46) export default connectDB;
ae7992fc (Hien Vo 2025-09-24 14:09:19 -0400 47) 

================== models/User.js ==================
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400   1) import mongoose from 'mongoose';
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400   3) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400   4) const userSchema = new mongoose.Schema({
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  10)   name: {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  11)     type: String,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  12)     required: true,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  13)     trim: true
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  14)   },
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  15)   email: {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  16)     type: String,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  17)     required: true,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  18)     lowercase: true,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  19)     trim: true
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  20)   },
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  21)   password: {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  22)     type: String,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  30)   },
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  31)   // Resume fields
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  32)   resumePath: {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  33)     type: String,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  34)     default: null
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  35)   },
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  36)   resumeOriginalName: {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  37)     type: String,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  38)     default: null
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  39)   },
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  40)   resumeUploadedAt: {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  41)     type: Date,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  42)     default: null
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  43)   },
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  58)   // Profile fields for future ML features
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  59)   skills: [{
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  60)     type: String,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  61)     trim: true
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  62)   }],
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  63)   experience: {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  64)     type: String,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  65)     trim: true
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400  66)   },
d6b9354c (Hien Vo        2025-10-27 14:04:20 -0400 102)     },
d6b9354c (Hien Vo        2025-10-27 14:04:20 -0400 103)     errorMessage: {
d6b9354c (Hien Vo        2025-10-27 14:04:20 -0400 104)       type: String,
d6b9354c (Hien Vo        2025-10-27 14:04:20 -0400 105)       default: null
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 108)   jobPreferences: {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 110)     location: String,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 111)     jobType: {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 112)       type: String,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 113)       enum: ['full-time', 'part-time', 'contract', 'internship'],
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 114)       default: 'full-time'
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 115)     },
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 116)     remotePreference: {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 117)       type: String,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 118)       enum: ['remote', 'hybrid', 'on-site', 'any'],
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 119)       default: 'any'
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 120)     },
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 121)     salaryRange: {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 122)       min: Number,
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 123)       max: Number
f3691a08 (Hien Vo        2025-10-27 21:04:18 -0400 124)     }
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 125)   }
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 126) }, {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 127)   timestamps: true
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 128) });
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 129) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 138) // Index for email lookups
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 139) userSchema.index({ email: 1 });
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 140) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 141) // Virtual for resume URL
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 142) userSchema.virtual('resumeUrl').get(function() {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 143)   if (this.resumePath) {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 145)     return `/api/upload/resume?file=${filename}`;
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 146)   }
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 147)   return null;
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 148) });
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 149) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 150) // Ensure virtual fields are serialized
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 151) userSchema.set('toJSON', {
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 152)   virtuals: true
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 153) });
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 154) 
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 155) export default mongoose.models.User || mongoose.model('User', userSchema);
ae7992fc (Hien Vo        2025-09-24 14:09:19 -0400 156) 

================== next.config.js ==================
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 1) /** @type {import('next').NextConfig} */
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 7) 
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 8) module.exports = nextConfig

================== package-lock.json ==================
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400    1) {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400    2)   "name": "pathfinder",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400    3)   "version": "0.1.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400    4)   "lockfileVersion": 3,
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400    5)   "requires": true,
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400    6)   "packages": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400    7)     "": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400    8)       "name": "pathfinder",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400    9)       "version": "0.1.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   10)       "dependencies": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   12)         "autoprefixer": "^10.4.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   13)         "axios": "^1.6.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   14)         "bcryptjs": "^2.4.3",
a84447ad (Hien Vo       2025-10-27 23:38:15 -0400   16)         "google-auth-library": "^10.4.2",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   18)         "jsonwebtoken": "^9.0.2",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   21)         "mongoose": "^8.0.0",
ae7992fc (Hien Vo       2025-09-24 14:09:19 -0400   22)         "multer": "^2.0.2",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   23)         "next": "^14.2.32",
a84447ad (Hien Vo       2025-10-27 23:38:15 -0400   26)         "ollama": "^0.6.0",
a84447ad (Hien Vo       2025-10-27 23:38:15 -0400   27)         "pdf2json": "^4.0.0",
a84447ad (Hien Vo       2025-10-27 23:38:15 -0400   28)         "pdfjs-dist": "^5.4.296",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   29)         "postcss": "^8.4.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   30)         "react": "^18.2.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   31)         "react-dom": "^18.2.0",
a84447ad (Hien Vo       2025-10-27 23:38:15 -0400   32)         "react-hot-toast": "^2.6.0",
ae7992fc (Hien Vo       2025-09-24 14:09:19 -0400   33)         "tailwindcss": "^3.3.0",
ae7992fc (Hien Vo       2025-09-24 14:09:19 -0400   34)         "uuid": "^13.0.0"
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   35)       },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   36)       "devDependencies": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   37)         "eslint": "^8.0.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   39)       }
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   40)     },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   41)     "node_modules/@alloc/quick-lru": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   42)       "version": "5.2.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   43)       "resolved": "https://registry.npmjs.org/@alloc/quick-lru/-/quick-lru-5.2.0.tgz",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   44)       "integrity": "sha512-UrcABB+4bUrFABwbluTIBErXwvbsU/V7TZWfmbgJfbkwiBuziS9gxdODUyuiecfdGQ85jglMW6juS3+z5TsKLw==",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   45)       "license": "MIT",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   46)       "engines": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   47)         "node": ">=10"
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   48)       },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   49)       "funding": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   50)         "url": "https://github.com/sponsors/sindresorhus"
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   51)       }
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400   52)     },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  124)     "node_modules/@eslint-community/eslint-utils": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  125)       "version": "4.9.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  126)       "resolved": "https://registry.npmjs.org/@eslint-community/eslint-utils/-/eslint-utils-4.9.0.tgz",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  127)       "integrity": "sha512-ayVFHdtZ+hsq1t2Dy24wCmGXGe4q9Gu3smhLYALJrr473ZH27MsnSL+LKUlimp4BWJqMDMLmPpx/Q9R3OAlL4g==",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  128)       "dev": true,
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  129)       "license": "MIT",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  130)       "dependencies": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  131)         "eslint-visitor-keys": "^3.4.3"
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  132)       },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  133)       "engines": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  134)         "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  135)       },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  136)       "funding": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  137)         "url": "https://opencollective.com/eslint"
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  138)       },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  139)       "peerDependencies": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  140)         "eslint": "^6.0.0 || ^7.0.0 || >=8.0.0"
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  141)       }
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  142)     },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  143)     "node_modules/@eslint-community/regexpp": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  144)       "version": "4.12.1",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  145)       "resolved": "https://registry.npmjs.org/@eslint-community/regexpp/-/regexpp-4.12.1.tgz",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  146)       "integrity": "sha512-CCZCDJuduB9OUkFkY2IgppNZMi2lBQgD2qzwXkEia16cge2pijY/aXi96CJMquDMn3nJdlPV1A5KrJEXwfLNzQ==",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  147)       "dev": true,
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  148)       "license": "MIT",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  149)       "engines": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  150)         "node": "^12.0.0 || ^14.0.0 || >=16.0.0"
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  151)       }
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  152)     },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  153)     "node_modules/@eslint/eslintrc": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  154)       "version": "2.1.4",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  155)       "resolved": "https://registry.npmjs.org/@eslint/eslintrc/-/eslintrc-2.1.4.tgz",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  156)       "integrity": "sha512-269Z39MS6wVJtsoUl10L60WdkhJVdPG24Q4eZTH3nnF6lpvSShEK3wQjDX9JRWAUPvPh7COouPpU9IrqaZFvtQ==",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  157)       "dev": true,
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  158)       "license": "MIT",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  159)       "dependencies": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  160)         "ajv": "^6.12.4",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  161)         "debug": "^4.3.2",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  162)         "espree": "^9.6.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  163)         "globals": "^13.19.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  164)         "ignore": "^5.2.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  165)         "import-fresh": "^3.2.1",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  166)         "js-yaml": "^4.1.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  167)         "minimatch": "^3.1.2",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  168)         "strip-json-comments": "^3.1.1"
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  169)       },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  170)       "engines": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  171)         "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  172)       },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  173)       "funding": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  174)         "url": "https://opencollective.com/eslint"
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  175)       }
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  176)     },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  177)     "node_modules/@eslint/js": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  178)       "version": "8.57.1",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  179)       "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.1.tgz",

================== package.json ==================
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  1) {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  2)   "name": "pathfinder",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  3)   "version": "0.1.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  4)   "private": true,
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  5)   "scripts": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  6)     "dev": "next dev",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  7)     "build": "next build",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  8)     "start": "next start",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400  9)     "lint": "next lint"
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 10)   },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 11)   "dependencies": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 13)     "autoprefixer": "^10.4.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 14)     "axios": "^1.6.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 15)     "bcryptjs": "^2.4.3",
5a2585de (Hien Vo       2025-10-27 13:07:01 -0400 17)     "google-auth-library": "^10.4.2",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 19)     "jsonwebtoken": "^9.0.2",
52701580 (Hien Vo       2025-10-27 13:39:40 -0400 20)     "mammoth": "^1.11.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 22)     "mongoose": "^8.0.0",
ae7992fc (Hien Vo       2025-09-24 14:09:19 -0400 23)     "multer": "^2.0.2",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 24)     "next": "^14.2.32",
5a2585de (Hien Vo       2025-10-27 13:07:01 -0400 26)     "next-themes": "^0.4.6",
4db04d7d (Hien Vo       2025-10-26 19:21:44 -0400 27)     "ollama": "^0.6.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 30)     "postcss": "^8.4.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 31)     "react": "^18.2.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 32)     "react-dom": "^18.2.0",
4db04d7d (Hien Vo       2025-10-26 19:21:44 -0400 33)     "react-hot-toast": "^2.6.0",
ae7992fc (Hien Vo       2025-09-24 14:09:19 -0400 34)     "tailwindcss": "^3.3.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 37)   },
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 38)   "devDependencies": {
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 39)     "eslint": "^8.0.0",
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 41)   }
^7ff844a (Hien Vo       2025-09-11 15:57:12 -0400 42) }

================== postcss.config.js ==================
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 1) module.exports = {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 2)   plugins: {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 3)     tailwindcss: {},
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 4)     autoprefixer: {},
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 5)   },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 6) }

================== public/pathfinder-logo.svg ==================
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400  1) <svg width="200" height="200" viewBox="0 0 200 200" xmlns="http://www.w3.org/2000/svg">
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400  2)   <!-- Head silhouette -->
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400  3)   <path d="M50 60 C50 30, 80 20, 100 20 C120 20, 150 30, 150 60 L150 120 C150 140, 140 150, 130 160 L120 170 C110 175, 90 175, 80 170 L70 160 C60 150, 50 140, 50 120 Z" fill="#1e3a5f"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400  4)   
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400  5)   <!-- Magnifying glass circle -->
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400  6)   <circle cx="100" cy="80" r="35" fill="#2563eb" stroke="#ffffff" stroke-width="4"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400  7)   
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400  8)   <!-- Network/connection nodes inside magnifying glass -->
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400  9)   <g fill="#ffffff">
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 10)     <!-- Center node -->
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 11)     <circle cx="100" cy="80" r="4"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 12)     
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 13)     <!-- Surrounding nodes -->
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 14)     <circle cx="85" cy="70" r="3"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 15)     <circle cx="115" cy="70" r="3"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 16)     <circle cx="90" cy="90" r="3"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 17)     <circle cx="110" cy="90" r="3"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 18)     <circle cx="100" cy="95" r="3"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 19)     <circle cx="105" cy="65" r="3"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 20)     
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 21)     <!-- Connection lines -->
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 22)     <g stroke="#ffffff" stroke-width="2" fill="none">
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 23)       <line x1="100" y1="80" x2="85" y2="70"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 24)       <line x1="100" y1="80" x2="115" y2="70"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 25)       <line x1="100" y1="80" x2="90" y2="90"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 26)       <line x1="100" y1="80" x2="110" y2="90"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 27)       <line x1="100" y1="80" x2="100" y2="95"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 28)       <line x1="100" y1="80" x2="105" y2="65"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 29)       <line x1="85" y1="70" x2="90" y2="90"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 30)       <line x1="115" y1="70" x2="110" y2="90"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 31)       <line x1="105" y1="65" x2="115" y2="70"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 32)     </g>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 33)   </g>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 34)   
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 35)   <!-- Magnifying glass handle -->
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 36)   <path d="M125 105 L140 120 C142 122, 142 125, 140 127 L135 132 C133 134, 130 134, 128 132 L113 117" 
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 37)         fill="#ffffff" stroke="#1e3a5f" stroke-width="2"/>
a84447ad (Hien Vo           2025-10-27 23:38:15 -0400 38) </svg>

================== services/resumeProcessingService.js ==================
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   1) import User from '../models/User.js';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   2) import connectDB from '../lib/mongodb.js';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   3) import { TextExtractor } from '../utils/textExtractor.js';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   4) import { ResumeParser } from '../utils/resumeParser.js';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   5) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   6) /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   7)  * Service for processing resumes with AI
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   8)  */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   9) export class ResumeProcessingService {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  10)   /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  11)    * Process resume with AI (extract text and parse skills)
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  12)    * @param {string} userId - User ID
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  13)    * @param {string} filePath - Path to resume file
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  14)    * @param {string} contentType - MIME type of the file
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  15)    */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  16)   static async processResumeWithAI(userId, filePath, contentType) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  17)     try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  18)       console.log(`Starting AI processing for user ${userId}, file: ${filePath}`);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  19)       
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  20)       // Extract text from resume
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  21)       const extractedText = await TextExtractor.extractText(filePath, contentType);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  22)       const cleanedText = TextExtractor.cleanText(extractedText);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  23)       
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  24)       console.log(`Text extracted (${cleanedText.length} characters) for user ${userId}`);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  25)       
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  26)       // Parse resume with AI
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  27)       const resumeParser = new ResumeParser();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  28)       const parsedData = await resumeParser.parseResumeWithFallback(cleanedText);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  29)       
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  30)       console.log(`Resume parsed for user ${userId}:`, {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  31)         skillsFound: parsedData.extractedSkills.length,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  32)         experience: parsedData.experience?.substring(0, 100) + '...',
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  33)         yearsOfExperience: parsedData.yearsOfExperience
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  34)       });
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  35)       
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  36)       // Update user with parsed data
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  37)       await connectDB();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  38)       const user = await User.findById(userId);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  39)       if (user) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  40)         // Update the skills array with AI-extracted skills
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  41)         user.skills = [...new Set([...user.skills, ...parsedData.extractedSkills])]; // Merge and dedupe
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  42)         
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  43)         // Store full parsed data
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  44)         user.parsedResumeData = {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  45)           ...parsedData,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  46)           parsedAt: new Date(),
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  47)           parsingMethod: parsedData.extractedSkills.length > 0 ? 'ollama' : 'fallback'
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  48)         };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  49)         
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  50)         await user.save();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  51)         console.log(`User ${userId} updated with AI-parsed resume data`);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  52)         
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  53)         return {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  54)           success: true,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  55)           skillsExtracted: parsedData.extractedSkills.length,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  56)           method: parsedData.extractedSkills.length > 0 ? 'ollama' : 'fallback'
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  57)         };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  58)       }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  59)       
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  60)       throw new Error('User not found');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  61)       
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  62)     } catch (error) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  63)       console.error(`Resume AI processing failed for user ${userId}:`, error);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  64)       
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  65)       // Check if this is an AI not available error
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  66)       const isAINotAvailable = error.message && error.message.includes('AI_NOT_AVAILABLE');
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  67)       
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  68)       // Mark parsing as failed with appropriate error message
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  69)       try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  70)         await connectDB();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  71)         const user = await User.findById(userId);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  72)         if (user) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  73)           user.parsedResumeData = {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  74)             extractedSkills: [],
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  75)             experience: '',
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  76)             education: '',
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  77)             jobTitles: [],
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  78)             companies: [],
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  79)             yearsOfExperience: 0,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  80)             parsedAt: new Date(),
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  81)             parsingMethod: 'failed',
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  82)             errorMessage: isAINotAvailable 
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  83)               ? 'AI service not available. Please start Ollama to enable skill extraction.'
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  84)               : 'Resume parsing failed. Please try again.'
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  85)           };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  86)           await user.save();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  87)         }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  88)         
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  89)         return {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  90)           success: false,
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  91)           error: isAINotAvailable 
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  92)             ? 'AI_NOT_AVAILABLE' 
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  93)             : error.message,
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  94)           userFriendlyMessage: isAINotAvailable
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  95)             ? 'AI service is not running. Please start Ollama with "ollama serve" to enable skill extraction.'
d6b9354c (Hien Vo 2025-10-27 14:04:20 -0400  96)             : 'Resume parsing failed. Please try again.',
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  97)           method: 'failed'
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  98)         };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  99)       } catch (dbError) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 100)         console.error(`Failed to mark processing as failed for user ${userId}:`, dbError);

================== sprint1/hvo5.md ==================
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400  1) # Sprint 1 Reflection
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400  2) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400  3) **Name:** Hien Vo  
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400  4) **NetID:** hvo5  
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400  5) **GitHub ID:** HienVo22  
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400  6) **Group Name:** PathFinder Team
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400  7) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400  8) ## What you planned to do
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400  9) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 10) - Create skills database for job matching system
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 11) - Implement skills extraction utilities for processing resumes
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 12) - Build basic job matching functionality
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 13) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 14) ## What you did not do
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 15) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 16) - Did not implement actual PDF resume parsing
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 17) - Did not connect to external job APIs
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 18) - Did not create user authentication integration
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 19) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 20) ## What problems you encountered
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 21) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 22) - Handling different skill naming variations and patterns
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 23) - Balancing scoring weights between required and preferred skills
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 24) - Ensuring efficient performance with large skill datasets
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 25) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 26) ## Issues you worked on
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 27) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 28) No specific GitHub issues were tracked for this work.
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 29) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 30) ## Files you worked on
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 31) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 32) - /Users/hienvo/PathFinder/data/skills.js
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 33) - /Users/hienvo/PathFinder/utils/skillsExtractor.js
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 34) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 35) ## Use of AI and/or 3rd party software
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 36) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 37) Used GitHub Copilot for code completion and suggestions while writing utility functions. Used standard JavaScript ES6 features and no external libraries beyond the existing Next.js framework.
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 38) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 39) ## What you accomplished
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 40) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 41) I created a comprehensive skills database containing over 150 technical and soft skills organized into categories including Frontend, Backend, Database, Cloud, Mobile, and Data Science technologies. The database is structured as exportable JavaScript arrays for easy integration across the application.
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 42) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 43) I implemented skills extraction utilities that can process resume text and identify relevant skills using keyword matching algorithms. The system includes basic extraction with simple matching and advanced extraction with confidence scoring. I created mock user profiles representing different developer types like Full Stack, Frontend, Backend, Python, Mobile, Data Science, and DevOps developers for testing purposes.
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 44) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 45) The utilities include skills validation functions to clean and verify user-entered skills against the database, removing duplicates and normalizing formats. I also implemented a suggestion system for autocomplete functionality that can recommend skills based on partial input matching.
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 46) 
518ee503 (Hien Vo 2025-09-30 23:37:24 -0400 47) The skills extraction system handles various skill naming patterns and variations, allowing flexible matching for common technology names. The code includes proper error handling for edge cases and is documented with JSDoc comments for maintainability.

================== sprint2/hvo5.md ==================
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400  1) # Sprint 2 Reflection
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400  2) 
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400  3) **Name:** Hien Vo  
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400  4) **NetID:** hvo5  
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400  5) **GitHub ID:** HienVo22  
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400  6) **Group Name:** PathFinder Team
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400  7) 
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400  8) ## What you planned to do
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400  9) 
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 10) - Integrate Llama AI model (Ollama) for resume parsing
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 11) - Redesign the job matching page with LinkedIn style preferences 
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 12) - Refine job matching algorithm to utilize AI extracted skills
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 13) - Implement background resume processing and skills extraction
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 14) 
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 15) ## What you did not do
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 16) 
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 17) - Did not implement full PDF text extraction (temporarily disabled due to Next.js compatibility issues)
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 18) - Did not add job title matching in the job matching algorithm
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 19) - Did not implement real time Ollama model switching interface
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 20) 
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 21) ## What problems you encountered
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 22) 
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 23) - Next.js client side compatibility issues with some of the server side modules
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 24) - Mongoose schema validation errors when saving preferences
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 25) - Ollama service connectivity requiring fallback to keyword based parsing when AI is unavailable
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 26) - Preference filtering logic requiring normalization of multiple filter types
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 27) 
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 28) ## Issues you worked on
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 29) 
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 30) - Utilized Llama as the AI model to parse resume
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 31) - Refined job matching algorithm with AI integration
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 32) - Redesigned the job matching page with LinkedIn-style preferences
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 33) 
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 34) ## Files you worked on
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 35) 
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 36) - /Users/hienvo/PathFinder/components/JobPreferencesModal.js
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 37) - /Users/hienvo/PathFinder/utils/resumeParser.js
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 38) - /Users/hienvo/PathFinder/services/resumeProcessingService.js
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 39) - /Users/hienvo/PathFinder/app/api/user/preferences/route.js
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 40) - /Users/hienvo/PathFinder/app/api/user/resume-parsing-status/route.js
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 41) - /Users/hienvo/PathFinder/components/ParsedResumeViewer.js
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 42) - /Users/hienvo/PathFinder/utils/textExtractor.js
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 43) - /Users/hienvo/PathFinder/components/JobMatching.js
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 44) - /Users/hienvo/PathFinder/utils/jobMatcher.js
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 45) - /Users/hienvo/PathFinder/models/User.js
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 46) 
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 47) ## Use of AI and/or 3rd party software
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 48) 
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 49) Used Ollama library to integrate Llama 3.2 AI model for resume parsing with NLP capabilities. Used GitHub Copilot and ChatGPT for code completion and debugging assistance.
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 50) 
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 51) ## What you accomplished
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 52) 
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 53) I successfully integrated the Llama 3.2 AI model through Ollama for intelligent resume parsing that extracts technical skills, job titles, companies, years of experience, and educational background from uploaded resumes. The system also includes a mechanism that utilized keyword matching when the AI service is unavailable.
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 54) 
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 55) I created a comprehensive LinkedIn style job preferences modal that allows users to set job titles, location types, specific locations, employment types, and desired pay. 
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 56) 
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 57) I redesigned the job matching page by replacing the basic filters with an integrated preferences system that shows a summary of current selections and provides a single "Edit Preferences" button.
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 58) 
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 59) I implemented background resume processing using a dedicated service that extracts text from DOCX files, sends it to the AI parser, and stores the structured results in MongoDB. The system includes real time parsing status tracking
edfb8b14 (Hien Vo 2025-10-14 23:27:53 -0400 60) 
53528cf2 (Hien Vo 2025-10-14 23:39:09 -0400 61) The enhanced job matching algorithm now uses AI extracted skills from resumes to provide personalized job recommendations with detailed skill gap analysis and match percentages. 

================== sprint3/hvo5.md ==================
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400   1) # Sprint 3 - Resume Matching Enhancement
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400   2) 
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400   3) ## Branch: ResumeMatching/hien → JSearchAPI/hien
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400   4) 
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400   5) ## GitHub Issues Assigned
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400   6) Based on GitHub project assignments, the following issues were worked on:
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400   7) - **Apply Externally**: Implemented external job application functionality with JSearch API integration
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400   8) - **Job Filtering**: Enhanced job filtering capabilities with LinkedIn-style preferences
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400   9) - **Visual and Styling Details**: Comprehensive dark mode support and UI improvements
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400  10) - **Resume Matching to Jobs**: Advanced skill matching algorithm with percentage-based scoring
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400  11) - **Integrate JSearch API to Pull Job Listings**: Complete JSearch API integration with mock data fallback
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  12) 
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  13) ## Objectives
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  14) - Upgrade AI model for better resume parsing accuracy
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  15) - Improve skill extraction from 85-92% to 90-95%
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400  16) - Integrate JSearch API for real job listings
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400  17) - Implement LinkedIn-style job matching interface
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400  18) - Add comprehensive dark mode support
ef19f8e6 (Hien Vo 2025-10-28 23:02:47 -0400  19) - Create personal profile system
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  20) 
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  21) ## Key Changes
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  22) 
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  23) ### 1. AI Model Configuration (llama3.2)
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  24) **Date**: October 27, 2025
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  25) 
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  26) **Current Model**: llama3.2 (lightweight, optimized for 8GB RAM systems)
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  27) 
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  28) **Changes Made**:
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  29) - Using llama3.2 for resume parsing
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  30) - Model is lightweight and suitable for laptops with limited memory
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  31) - Expected accuracy: 85-92% skill extraction
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  32) 
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  33) **Technical Details**:
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  34) - Model: llama3.2 (3.2 billion parameters)
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  35) - Memory requirements: ~2GB RAM
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  36) - Performance: Good skill extraction for:
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  37)   - Skills in dedicated sections
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  38)   - Skills mentioned in project contexts
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  39)   - Abbreviated skills (JS → JavaScript, ML → Machine Learning)
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  40)   - Special characters (C++, C#)
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  41) 
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  42) **Files Modified**:
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  43) - `utils/resumeParser.js` - Using 'llama3.2'
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  44) 
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  45) **Note**: llama3.1:8b (4.9GB model) was tested but reverted due to high memory requirements. For systems with 16GB+ RAM, llama3.1:8b provides 90-95% accuracy.
ac63915d (Hien Vo 2025-10-27 13:58:20 -0400  46) 
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  47) ### 2. Remove Fallback Parsing Method
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  48) **Date**: October 27, 2025
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  49) 
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  50) **Changes Made**:
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  51) - Removed fallback regex-based parsing completely
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  52) - Now requires Ollama AI service to be running for skill extraction
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  53) - Added user-friendly error messages when AI is not available
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  54) - Updated error handling to distinguish between AI unavailable vs other errors
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  55) 
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  56) **Files Modified**:
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  57) - `utils/resumeParser.js` - Removed fallback method, throw error if AI not available
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  58) - `services/resumeProcessingService.js` - Enhanced error handling with specific messages
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  59) - `models/User.js` - Added errorMessage field to parsedResumeData
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  60) 
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  61) **Reasoning**:
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  62) - Fallback method only extracted 7 skills vs 20+ with AI
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  63) - AI extraction is significantly more accurate (90-95% vs ~60% fallback)
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  64) - Better to require AI than provide low-quality results
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  65) - Clear error messages guide users to start Ollama service
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  66) 
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  67) **User Experience**:
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  68) - When AI not running: Shows clear message "AI service not available. Please start Ollama to enable skill extraction."
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  69) - When AI running: Extracts 20+ skills with good accuracy using llama3.2
09ef5061 (Hien Vo 2025-10-27 14:05:37 -0400  70) 
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  71) ### 3. Fix AI Skill Extraction Issue
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  72) **Date**: October 28, 2025
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  73) 
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  74) **Problem Identified**:
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  75) - AI was only extracting 7-13 skills when resumes had 25+ skills listed
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  76) - Root cause: AI was returning grouped skill categories like "Frameworks & Libraries: React, Node.js, Express"
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  77) - Validation function was rejecting these grouped strings
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  78) 
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  79) **Changes Made**:
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  80) 1. **Enhanced AI Prompt** - Added explicit instructions to return individual skills, not grouped categories
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  81)    - Added examples showing correct vs incorrect format
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  82)    - Emphasized: "List each skill separately"
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  83) 
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  84) 2. **Improved Validation** - Made skill validation more flexible
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  85)    - Added normalization before validation
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  86)    - Added case-insensitive matching
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  87)    - Added pattern-based validation for technical skills not in database
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  88)    - Added logging to show rejected skills
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  89) 
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  90) 3. **Added Debugging Tools**
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  91)    - Created detailed console logging (🤖, 📊, ✅, 🚫 emojis)
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  92)    - Shows skills before/after validation and deduplication
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  93)    - Helps diagnose extraction issues
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  94) 
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  95) **Files Modified**:
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  96) - `utils/resumeParser.js` - Updated AI prompt, enhanced validateSkills(), added isLikelyTechnicalSkill()
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  97) 
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  98) **Results**:
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400  99) - Before fix: 7-13 skills extracted
9f3099a2 (Hien Vo 2025-10-27 20:15:58 -0400 100) - After fix: 25-30+ skills extracted (3-4x improvement!)

================== start-all.sh ==================
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400  1) #!/bin/bash
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400  2) 
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400  3) # PathFinder - Start All Services
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400  4) # Run this script to start MongoDB, Ollama, and Next.js
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400  5) 
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400  6) echo "🚀 Starting PathFinder..."
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400  7) echo ""
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400  8) 
95dcffcf (Hien Vo 2025-10-28 08:54:07 -0400  9) # Check if MongoDB is running (portable check)
95dcffcf (Hien Vo 2025-10-28 08:54:07 -0400 10) if ps aux | grep -v grep | grep "mongod" > /dev/null; then
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 11)     echo "✓ MongoDB is already running"
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 12) else
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 13)     echo "Starting MongoDB..."
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 14)     
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 15)     # Set configurable MongoDB data path
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 16)     MONGODB_DATA_PATH=${MONGODB_DATA_PATH:-"data/db_new"}
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 17)     
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 18)     # Ensure MongoDB data directory exists
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 19)     if [ ! -d "$MONGODB_DATA_PATH" ]; then
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 20)         echo "Creating MongoDB data directory: $MONGODB_DATA_PATH"
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 21)         mkdir -p "$MONGODB_DATA_PATH"
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 22)         if [ $? -ne 0 ]; then
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 23)             echo "❌ Failed to create MongoDB data directory: $MONGODB_DATA_PATH"
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 24)             echo "Please check permissions or create the directory manually"
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 25)             exit 1
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 26)         fi
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 27)     fi
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 28)     
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 29)     # Check if directory is writable
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 30)     if [ ! -w "$MONGODB_DATA_PATH" ]; then
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 31)         echo "❌ MongoDB data directory is not writable: $MONGODB_DATA_PATH"
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 32)         echo "Please check permissions: chmod 755 $MONGODB_DATA_PATH"
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 33)         exit 1
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 34)     fi
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 35)     
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 36)     mongod --dbpath "$MONGODB_DATA_PATH" --port 27017 > /dev/null 2>&1 &
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 37)     sleep 2
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 38)     
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 39)     # Verify MongoDB started successfully
95dcffcf (Hien Vo 2025-10-28 08:54:07 -0400 40)     if ps aux | grep -v grep | grep "mongod" > /dev/null; then
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 41)         echo "✓ MongoDB started on port 27017 with data path: $MONGODB_DATA_PATH"
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 42)     else
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 43)         echo "❌ Failed to start MongoDB. Check the logs for more details."
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 44)         echo "You can run 'mongod --dbpath $MONGODB_DATA_PATH --port 27017' manually to see error messages."
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 45)         exit 1
e7a8001e (Hien Vo 2025-10-27 21:01:16 -0400 46)     fi
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 47) fi
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 48) 
95dcffcf (Hien Vo 2025-10-28 08:54:07 -0400 49) # Check if Ollama is running (portable check)
95dcffcf (Hien Vo 2025-10-28 08:54:07 -0400 50) if ps aux | grep -v grep | grep "ollama" > /dev/null; then
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 51)     echo "✓ Ollama is already running"
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 52) else
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 53)     echo "Starting Ollama AI service..."
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 54)     ollama serve > /dev/null 2>&1 &
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 55)     sleep 2
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 56)     echo "✓ Ollama started on port 11434"
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 57) fi
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 58) 
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 59) # Check if Next.js is running on port 3000
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 60) if lsof -Pi :3000 -sTCP:LISTEN -t >/dev/null 2>&1; then
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 61)     echo "✓ Next.js is already running on port 3000"
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 62) else
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 63)     echo "Starting Next.js..."
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 64)     npm run dev > /dev/null 2>&1 &
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 65)     sleep 3
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 66)     echo "✓ Next.js started on port 3000"
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 67) fi
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 68) 
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 69) echo ""
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 70) echo "✅ All services are running!"
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 71) echo ""
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 72) echo "Open your browser: http://localhost:3000"
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 73) echo ""
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 74) echo "To stop all services, run: ./stop-all.sh"
d62237a7 (Hien Vo 2025-10-27 14:36:17 -0400 75) 
4a785933 (Hien Vo 2025-10-27 20:34:49 -0400 76) 
4a785933 (Hien Vo 2025-10-27 20:34:49 -0400 77) 

================== stop-all.sh ==================
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400  1) #!/bin/bash
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400  2) 
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400  3) # PathFinder - Stop All Services
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400  4) 
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400  5) echo "🛑 Stopping PathFinder services..."
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400  6) echo ""
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400  7) 
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400  8) # Stop MongoDB
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400  9) if pgrep -x "mongod" > /dev/null; then
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 10)     pkill mongod
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 11)     echo "✓ MongoDB stopped"
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 12) else
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 13)     echo "○ MongoDB was not running"
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 14) fi
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 15) 
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 16) # Stop Ollama
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 17) if pgrep -x "ollama" > /dev/null; then
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 18)     pkill ollama
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 19)     echo "✓ Ollama stopped"
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 20) else
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 21)     echo "○ Ollama was not running"
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 22) fi
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 23) 
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 24) # Stop Next.js
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 25) if lsof -Pi :3000 -sTCP:LISTEN -t >/dev/null 2>&1; then
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 26)     lsof -ti:3000 | xargs kill -9 2>/dev/null
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 27)     echo "✓ Next.js stopped"
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 28) else
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 29)     echo "○ Next.js was not running"
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 30) fi
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 31) 
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 32) echo ""
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 33) echo "✅ All services stopped"
d62237a7 (Hien Vo           2025-10-27 14:36:17 -0400 34) 
4a785933 (Hien Vo           2025-10-27 20:34:49 -0400 35) 
4a785933 (Hien Vo           2025-10-27 20:34:49 -0400 36) 

================== tailwind.config.js ==================
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  1) /** @type {import('tailwindcss').Config} */
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  2) module.exports = {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  4)   content: [
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  5)     './pages/**/*.{js,jsx,mdx}',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  6)     './components/**/*.{js,jsx,mdx}',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  7)     './app/**/*.{js,jsx,mdx}',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  8)   ],
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400  9)   theme: {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 10)     extend: {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 11)       colors: {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 12)         primary: {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 13)           50: '#eff6ff',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 14)           100: '#dbeafe',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 15)           500: '#3b82f6',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 16)           600: '#2563eb',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 17)           700: '#1d4ed8',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 18)         },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 19)         secondary: {
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 20)           50: '#f8fafc',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 21)           100: '#f1f5f9',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 22)           200: '#e2e8f0',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 23)           300: '#cbd5e1',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 24)           400: '#94a3b8',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 25)           500: '#64748b',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 26)           600: '#475569',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 27)           700: '#334155',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 28)           800: '#1e293b',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 29)           900: '#0f172a',
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 30)         }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 31)       }
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 32)     },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 33)   },
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 34)   plugins: [],
^7ff844a (Hien Vo 2025-09-11 15:57:12 -0400 35) }

================== utils/jobMatcher.js ==================
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   1) import { SAMPLE_JOBS } from '../data/jobs.js';
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   2) 
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   3) /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   4)  * Job matching algorithm that compares user skills with job requirements
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   5)  */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   6) export class JobMatcher {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   7)   /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   8)    * Calculate match percentage between user skills and job requirements
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   9)    * @param {Array} userSkills - Array of user's skills
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  10)    * @param {Object} job - Job object with requiredSkills and preferredSkills
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  11)    * @returns {Object} Match analysis
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  12)    */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  13)   static calculateJobMatch(userSkills, job) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  14)     if (!userSkills || !Array.isArray(userSkills) || userSkills.length === 0) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  15)       return {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  16)         matchPercentage: 0,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  17)         requiredSkillsMatch: 0,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  18)         preferredSkillsMatch: 0,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  19)         matchedRequiredSkills: [],
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  20)         matchedPreferredSkills: [],
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  21)         missingRequiredSkills: job.requiredSkills || [],
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  22)         missingPreferredSkills: job.preferredSkills || [],
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  23)         overallScore: 0
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  24)       };
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  25)     }
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  26) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  27)     const requiredSkills = job.requiredSkills || [];
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  28)     const preferredSkills = job.preferredSkills || [];
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  29)     
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  30)     // Normalize skills for case-insensitive comparison
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  31)     const userSkillsLower = userSkills.map(skill => skill.toLowerCase());
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  32)     
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  33)     // Calculate required skills match
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  34)     const matchedRequiredSkills = requiredSkills.filter(skill => 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  35)       userSkillsLower.includes(skill.toLowerCase())
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  36)     );
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  37)     const missingRequiredSkills = requiredSkills.filter(skill => 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  38)       !userSkillsLower.includes(skill.toLowerCase())
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  39)     );
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  40)     
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  41)     // Calculate preferred skills match
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  42)     const matchedPreferredSkills = preferredSkills.filter(skill => 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  43)       userSkillsLower.includes(skill.toLowerCase())
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  44)     );
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  45)     const missingPreferredSkills = preferredSkills.filter(skill => 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  46)       !userSkillsLower.includes(skill.toLowerCase())
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  47)     );
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  48)     
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  49)     // Calculate match percentages
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  50)     const requiredSkillsMatch = requiredSkills.length > 0 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  51)       ? (matchedRequiredSkills.length / requiredSkills.length) * 100 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  52)       : 100;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  53)       
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  54)     const preferredSkillsMatch = preferredSkills.length > 0 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  55)       ? (matchedPreferredSkills.length / preferredSkills.length) * 100 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  56)       : 100;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  57)     
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  58)     // Overall match percentage (weighted: 70% required, 30% preferred)
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  59)     const matchPercentage = (requiredSkillsMatch * 0.7) + (preferredSkillsMatch * 0.3);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  60)     
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  61)     // Calculate overall score considering both match percentage and absolute skill coverage
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  62)     const totalSkillsRequired = requiredSkills.length + preferredSkills.length;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  63)     const totalSkillsMatched = matchedRequiredSkills.length + matchedPreferredSkills.length;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  64)     const skillCoverageBonus = totalSkillsRequired > 0 ? (totalSkillsMatched / totalSkillsRequired) * 20 : 0;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  65)     
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  66)     const overallScore = Math.min(100, matchPercentage + skillCoverageBonus);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  67) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  68)     return {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  69)       matchPercentage: Math.round(matchPercentage),
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  70)       requiredSkillsMatch: Math.round(requiredSkillsMatch),
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  71)       preferredSkillsMatch: Math.round(preferredSkillsMatch),
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  72)       matchedRequiredSkills,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  73)       matchedPreferredSkills,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  74)       missingRequiredSkills,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  75)       missingPreferredSkills,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  76)       overallScore: Math.round(overallScore),
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  77)       totalRequiredSkills: requiredSkills.length,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  78)       totalPreferredSkills: preferredSkills.length,
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  79)       totalMatchedSkills: matchedRequiredSkills.length + matchedPreferredSkills.length
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  80)     };
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  81)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  82) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  83)   /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  84)    * Get all jobs with match analysis sorted by match percentage
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  85)    * @param {Array} userSkills - Array of user's skills
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  86)    * @param {Object} filters - Optional filters (location, jobType, etc.)
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  87)    * @returns {Promise<Array>} Array of jobs with match analysis, sorted by match percentage
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  88)    */
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  89)   static async getJobMatches(userSkills, filters = {}) {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  90)     // Fetch jobs from JSearch API
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  91)     let jobs = [];
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  92)     try {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  93)       const params = new URLSearchParams();
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  94)       
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  95)       // Build search query from filters
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  96)       const query = filters.query || filters.jobTitle || 'software developer';
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  97)       params.append('query', query);
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  98)       
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400  99)       if (filters.location && filters.location !== 'any') {
0e34ca56 (Hien Vo 2025-10-27 21:50:32 -0400 100)         params.append('location', filters.location);

================== utils/resumeParser.js ==================
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   1) import { Ollama } from 'ollama';
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400   2) import { SKILLS_DATABASE, TECHNICAL_SKILLS, SOFT_SKILLS } from '../data/skills.js';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   3) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   4) /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   5)  * Resume parsing service using Ollama
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   6)  */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   7) export class ResumeParser {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   8)   constructor() {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   9)     this.ollama = new Ollama({
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  10)       host: 'http://localhost:11434', // Default Ollama host
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  11)     });
0e7f1a61 (Hien Vo 2025-10-27 20:05:02 -0400  12)     this.model = 'llama3.2'; // Using llama3.2 (lighter model, good for 8GB RAM)
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  13)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  14) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  15)   /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  16)    * Set the Ollama model to use
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  17)    * @param {string} model - Model name (e.g., 'llama3.2', 'mistral', etc.)
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  18)    */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  19)   setModel(model) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  20)     this.model = model;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  21)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  22) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  23)   /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  24)    * Parse resume text and extract structured information
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  25)    * @param {string} resumeText - Extracted text from resume
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  26)    * @returns {Promise<Object>} Parsed resume data
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  27)    */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  28)   async parseResume(resumeText) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  29)     try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  30)       // Create skills list for the prompt
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  31)       const skillsList = SKILLS_DATABASE.join(', ');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  32)       
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  33)       const prompt = `
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  34) You are an expert AI resume parser. Your task is to extract ALL technical and soft skills mentioned in the resume. Be extremely thorough and comprehensive - extract every skill that is explicitly mentioned or clearly demonstrated.
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  35) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  36) RESUME TEXT:
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  37) ${resumeText}
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  38) 
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  39) REFERENCE SKILLS LIST (extract skills from this list, but also extract similar/related skills):
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  40) ${skillsList}
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  41) 
1e306512 (Hien Vo 2025-10-27 20:14:47 -0400  42) Return ONLY a valid JSON object with this EXACT structure:
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  43) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  44)   "extractedSkills": ["skill1", "skill2", "skill3"],
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  45)   "experience": "Brief summary of work experience",
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  46)   "education": "Education background", 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  47)   "jobTitles": ["title1", "title2"],
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  48)   "companies": ["company1", "company2"],
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  49)   "yearsOfExperience": number
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  50) }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  51) 
1e306512 (Hien Vo 2025-10-27 20:14:47 -0400  52) **CRITICAL: extractedSkills MUST be an array of INDIVIDUAL skill names ONLY.**
1e306512 (Hien Vo 2025-10-27 20:14:47 -0400  53) ❌ WRONG: ["Frameworks & Libraries: React, Node.js, Express", "Tools: Git, Docker"]
1e306512 (Hien Vo 2025-10-27 20:14:47 -0400  54) ✅ CORRECT: ["React", "Node.js", "Express", "Git", "Docker"]
1e306512 (Hien Vo 2025-10-27 20:14:47 -0400  55) 
1e306512 (Hien Vo 2025-10-27 20:14:47 -0400  56) DO NOT group skills into categories. List each skill separately.
1e306512 (Hien Vo 2025-10-27 20:14:47 -0400  57) 
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  58) COMPREHENSIVE EXTRACTION RULES:
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  59) 
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  60) 🎯 **SKILLS SECTIONS**: Look for dedicated skills sections with headers like:
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  61) - "Skills", "Technical Skills", "Programming Languages", "Technologies"
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  62) - "Tools", "Frameworks", "Languages", "Proficiencies", "Competencies"
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  63) - "Software", "Platforms", "Databases", "Operating Systems"
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  64) - Extract EVERY skill listed in these sections
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  65) 
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  66) 🔧 **TECHNICAL SKILLS** - Extract from ANY context:
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  67) 1. **Direct Mentions**: "JavaScript", "Python", "React", "AWS", etc.
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  68) 2. **Project Descriptions**: "built with X", "using X", "implemented in X"
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  69) 3. **Work Experience**: "developed X applications", "maintained X systems"
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  70) 4. **Education/Coursework**: "studied X", "coursework in X", "concentration in X"
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  71) 5. **Certifications**: "certified in X", "X certification"
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  72) 6. **Tools & Frameworks**: Any named tools, libraries, frameworks, platforms
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  73) 7. **Databases**: Any database technologies mentioned
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  74) 8. **Cloud Platforms**: AWS, Azure, GCP, etc.
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  75) 9. **Programming Languages**: Including versions (Java 8, Python 3, etc.)
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  76) 10. **Development Tools**: IDEs, version control, testing frameworks
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  77) 
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  78) 👥 **SOFT SKILLS** - Extract when demonstrated:
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  79) 1. **Leadership**: "led", "managed team", "supervised", "mentored"
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  80) 2. **Communication**: "presented", "collaborated", "coordinated"
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  81) 3. **Problem Solving**: "solved", "debugged", "optimized", "troubleshot"
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  82) 4. **Project Management**: "managed projects", "planned", "delivered"
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  83) 5. **Analytical**: "analyzed", "evaluated", "researched"
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  84) 
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  85) 🔄 **SKILL VARIATIONS** - Normalize these common abbreviations:
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  86) - JS, Javascript → JavaScript
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  87) - TS → TypeScript  
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  88) - Node, NodeJS → Node.js
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  89) - ReactJS, React.js → React
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  90) - VueJS, Vue → Vue.js
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  91) - Postgres → PostgreSQL
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  92) - Mongo → MongoDB
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  93) - ML → Machine Learning
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  94) - AI → Artificial Intelligence
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  95) - C++ → C++
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  96) - C# → C#
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  97) - AWS → AWS
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  98) - GCP → Google Cloud Platform
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400  99) - K8s → Kubernetes
98e871ec (Hien Vo 2025-10-27 13:30:37 -0400 100) - Docker Compose → Docker

================== utils/skillsExtractor.js ==================
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   1) import { SKILLS_DATABASE } from '../data/skills';
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   2) 
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   3) /**
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   4)  * Extract skills from resume text using simple keyword matching
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   5)  * @param {string} resumeText - The resume text content
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   6)  * @returns {string[]} Array of found skills
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   7)  */
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   8) export const extractSkillsFromResume = (resumeText) => {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400   9)   if (!resumeText || typeof resumeText !== 'string') {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  10)     return [];
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  11)   }
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  12)   
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  13)   const foundSkills = new Set();
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  14)   const resumeTextLower = resumeText.toLowerCase();
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  15)   
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  16)   // Simple keyword matching
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  17)   SKILLS_DATABASE.forEach(skill => {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  18)     const skillLower = skill.toLowerCase();
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  19)     
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  20)     // Check for exact matches and common variations
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  21)     if (resumeTextLower.includes(skillLower) ||
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  22)         resumeTextLower.includes(skillLower.replace('.', '')) ||
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  23)         resumeTextLower.includes(skillLower.replace(' ', '')) ||
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  24)         resumeTextLower.includes(skillLower.replace('-', ''))) {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  25)       foundSkills.add(skill);
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  26)     }
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  27)   });
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  28)   
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  29)   return Array.from(foundSkills).sort();
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  30) };
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  31) 
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  32) /**
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  33)  * Extract skills from resume text with better pattern matching
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  34)  * @param {string} resumeText - The resume text content
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  35)  * @returns {Object} Object with skills and confidence scores
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  36)  */
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  37) export const extractSkillsAdvanced = (resumeText) => {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  38)   if (!resumeText || typeof resumeText !== 'string') {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  39)     return { skills: [], confidence: 'low' };
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  40)   }
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  41)   
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  42)   const foundSkills = new Map(); // skill -> confidence score
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  43)   const resumeTextLower = resumeText.toLowerCase();
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  44)   
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  45)   SKILLS_DATABASE.forEach(skill => {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  46)     const skillLower = skill.toLowerCase();
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  47)     let confidence = 0;
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  48)     
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  49)     // Exact match (highest confidence)
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  50)     if (resumeTextLower.includes(` ${skillLower} `) || 
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  51)         resumeTextLower.includes(`\n${skillLower}\n`) ||
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  52)         resumeTextLower.includes(`\t${skillLower}\t`)) {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  53)       confidence = 3;
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  54)     }
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  55)     // Partial match
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  56)     else if (resumeTextLower.includes(skillLower)) {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  57)       confidence = 2;
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  58)     }
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  59)     // Variation match
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  60)     else if (resumeTextLower.includes(skillLower.replace('.', '')) ||
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  61)              resumeTextLower.includes(skillLower.replace(' ', '')) ||
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  62)              resumeTextLower.includes(skillLower.replace('-', ''))) {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  63)       confidence = 1;
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  64)     }
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  65)     
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  66)     if (confidence > 0) {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  67)       foundSkills.set(skill, confidence);
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  68)     }
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  69)   });
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  70)   
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  71)   // Sort by confidence and then alphabetically
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  72)   const sortedSkills = Array.from(foundSkills.entries())
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  73)     .sort((a, b) => {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  74)       if (b[1] !== a[1]) return b[1] - a[1]; // Sort by confidence desc
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  75)       return a[0].localeCompare(b[0]); // Then alphabetically
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  76)     })
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  77)     .map(([skill]) => skill);
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  78)   
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  79)   const overallConfidence = sortedSkills.length > 10 ? 'high' : 
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  80)                            sortedSkills.length > 5 ? 'medium' : 'low';
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  81)   
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  82)   return {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  83)     skills: sortedSkills,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  84)     confidence: overallConfidence,
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  85)     totalFound: sortedSkills.length
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  86)   };
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  87) };
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  88) 
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  89) /**
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  90)  * Mock user skills for testing without resume upload
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  91)  * Different skill sets for different developer types
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  92)  */
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  93) export const MOCK_USER_PROFILES = {
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  94)   frontendDeveloper: [
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  95)     "JavaScript", "React", "HTML", "CSS", "Git", "TypeScript", 
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  96)     "Redux", "Tailwind CSS", "Webpack", "Jest"
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  97)   ],
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  98)   backendDeveloper: [
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400  99)     "Node.js", "Express", "MongoDB", "PostgreSQL", "Docker", 
e7583535 (Hien Vo 2025-09-24 16:18:43 -0400 100)     "AWS", "Git", "JavaScript", "REST API", "Linux"

================== utils/textExtractor.js ==================
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  1) import fs from 'fs';
52701580 (Hien Vo 2025-10-27 13:39:40 -0400  2) import mammoth from 'mammoth';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  3) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  4) /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  5)  * Extract text from different file types
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  6)  */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  7) export class TextExtractor {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  8)   /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  9)    * Extract text from PDF, DOC, or DOCX files
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 10)    * @param {string} filePath - Path to the file
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 11)    * @param {string} contentType - MIME type of the file
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 12)    * @returns {Promise<string>} Extracted text
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 13)    */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 14)   static async extractText(filePath, contentType) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 15)     try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 16)       if (!fs.existsSync(filePath)) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 17)         throw new Error('File not found');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 18)       }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 19) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 20)       const buffer = fs.readFileSync(filePath);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 21) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 22)       switch (contentType) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 23)         case 'application/pdf':
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 24)           // PDF parsing disabled - requires external dependencies
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 25)           console.warn('PDF parsing disabled. Using fallback text extraction.');
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 26)           return 'PDF text extraction unavailable. Using fallback parsing for skill detection.';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 27)         
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 28)         case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 29)           return await this.extractFromDOCX(buffer);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 30)         
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 31)         case 'application/msword':
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 32)           // For older .doc files, use basic extraction
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 33)           return await this.extractFromDOCX(buffer);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 34)         
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 35)         default:
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 36)           throw new Error(`Unsupported file type: ${contentType}`);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 37)       }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 38)     } catch (error) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 39)       console.error('Text extraction error:', error);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 40)       throw new Error(`Failed to extract text: ${error.message}`);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 41)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 42)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 43) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 44)   /**
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 45)    * Extract text from PDF buffer (DISABLED - requires external dependencies)
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 46)    * @param {Buffer} buffer - PDF file buffer
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 47)    * @returns {Promise<string>} Extracted text
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 48)    */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 49)   static async extractFromPDF(buffer) {
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 50)     // Disabled due to dependency issues
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 51)     throw new Error('PDF extraction disabled. Please use DOCX files.');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 52)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 53) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 54)   /**
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 55)    * Extract text from DOCX buffer using mammoth for better accuracy
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 56)    * @param {Buffer} buffer - DOCX file buffer
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 57)    * @returns {Promise<string>} Extracted text
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 58)    */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 59)   static async extractFromDOCX(buffer) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 60)     try {
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 61)       // Use mammoth for proper DOCX text extraction with formatting preservation
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 62)       const result = await mammoth.extractRawText({ buffer });
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 63)       
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 64)       if (result.messages && result.messages.length > 0) {
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 65)         console.log('DOCX extraction warnings:', result.messages);
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 66)       }
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 67)       
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 68)       const text = result.value;
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 69)       
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 70)       if (!text || text.length < 50) {
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 71)         throw new Error('Unable to extract meaningful text from DOCX file');
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 72)       }
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 73)       
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 74)       // Clean up the text while preserving important structure
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 75)       const cleanedText = text
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 76)         .replace(/\t/g, ' ')  // Replace tabs with spaces
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 77)         .replace(/\r\n/g, '\n')  // Normalize line endings
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 78)         .replace(/ {2,}/g, ' ')  // Replace multiple spaces with single space
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 79)         .trim();
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 80)       
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 81)       return cleanedText;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 82)     } catch (error) {
52701580 (Hien Vo 2025-10-27 13:39:40 -0400 83)       console.error('DOCX extraction error:', error);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 84)       throw new Error(`DOCX extraction failed: ${error.message}`);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 85)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 86)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 87) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 88)   /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 89)    * Clean extracted text by removing extra whitespace and normalizing
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 90)    * @param {string} text - Raw extracted text
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 91)    * @returns {string} Cleaned text
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 92)    */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 93)   static cleanText(text) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 94)     return text
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 95)       .replace(/\s+/g, ' ') // Replace multiple whitespace with single space
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 96)       .replace(/\n+/g, '\n') // Replace multiple newlines with single newline
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 97)       .trim();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 98)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 99) }

