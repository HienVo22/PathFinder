Source code lines committed by Hien Vo for Sprint 3:

================== utils/textExtractor.js ==================
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  1) import fs from 'fs';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  2) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  3) /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  4)  * Extract text from different file types
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  5)  * Note: Currently simplified to work without external dependencies
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  6)  */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  7) export class TextExtractor {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  8)   /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400  9)    * Extract text from PDF, DOC, or DOCX files
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 10)    * @param {string} filePath - Path to the file
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 11)    * @param {string} contentType - MIME type of the file
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 12)    * @returns {Promise<string>} Extracted text
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 13)    */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 14)   static async extractText(filePath, contentType) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 15)     try {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 16)       if (!fs.existsSync(filePath)) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 17)         throw new Error('File not found');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 18)       }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 19) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 20)       const buffer = fs.readFileSync(filePath);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 21) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 22)       switch (contentType) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 23)         case 'application/pdf':
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 24)           // PDF parsing disabled - requires external dependencies
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 25)           console.warn('PDF parsing disabled. Using fallback text extraction.');
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 26)           return 'PDF text extraction unavailable. Using fallback parsing for skill detection.';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 27)         
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 28)         case 'application/vnd.openxmlformats-officedocument.wordprocessingml.document':
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 29)           return await this.extractFromDOCX(buffer);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 30)         
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 31)         case 'application/msword':
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 32)           // For older .doc files, use basic extraction
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 33)           return await this.extractFromDOCX(buffer);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 34)         
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 35)         default:
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 36)           throw new Error(`Unsupported file type: ${contentType}`);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 37)       }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 38)     } catch (error) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 39)       console.error('Text extraction error:', error);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 40)       throw new Error(`Failed to extract text: ${error.message}`);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 41)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 42)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 43) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 44)   /**
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 45)    * Extract text from PDF buffer (DISABLED - requires external dependencies)
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 46)    * @param {Buffer} buffer - PDF file buffer
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 47)    * @returns {Promise<string>} Extracted text
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 48)    */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 49)   static async extractFromPDF(buffer) {
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 50)     // Disabled due to dependency issues
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 51)     throw new Error('PDF extraction disabled. Please use DOCX files.');
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 52)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 53) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 54)   /**
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 55)    * Extract text from DOCX buffer (Basic extraction without mammoth)
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 56)    * @param {Buffer} buffer - DOCX file buffer
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 57)    * @returns {Promise<string>} Extracted text
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 58)    */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 59)   static async extractFromDOCX(buffer) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 60)     try {
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 61)       // Basic text extraction without mammoth - convert buffer to string and clean
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 62)       // This is a fallback method that won't be as accurate as mammoth
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 63)       const text = buffer.toString('utf8');
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 64)       // Try to extract readable text from the XML structure
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 65)       const cleanedText = text
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 66)         .replace(/<[^>]*>/g, ' ') // Remove XML tags
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 67)         .replace(/[^\x20-\x7E\n]/g, ' ') // Keep only printable ASCII and newlines
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 68)         .replace(/\s+/g, ' ') // Normalize whitespace
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 69)         .trim();
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 70)       
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 71)       if (cleanedText.length < 50) {
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 72)         throw new Error('Unable to extract meaningful text from DOCX file');
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 73)       }
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 74)       
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 75)       return cleanedText;
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 76)     } catch (error) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 77)       throw new Error(`DOCX extraction failed: ${error.message}`);
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 78)     }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 79)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 80) 
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 81)   /**
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 82)    * Clean extracted text by removing extra whitespace and normalizing
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 83)    * @param {string} text - Raw extracted text
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 84)    * @returns {string} Cleaned text
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 85)    */
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 86)   static cleanText(text) {
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 87)     return text
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 88)       .replace(/\s+/g, ' ') // Replace multiple whitespace with single space
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 89)       .replace(/\n+/g, '\n') // Replace multiple newlines with single newline
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 90)       .trim();
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 91)   }
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400 92) }

================== components/ResumeViewer.js ==================
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400   1) "use client";
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400   2) 
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400   3) import { useState, useEffect } from 'react';
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400   4) 
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400   5) export default function ResumeViewer({ resumeFilename, onClose }) {
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400   6)   const [loading, setLoading] = useState(true);
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400   7)   const [error, setError] = useState(null);
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400   8)   const [blobUrl, setBlobUrl] = useState(null);
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400   9)   const [contentType, setContentType] = useState('application/pdf');
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  10)   const [viewerUrl, setViewerUrl] = useState(null);
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  11) 
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  12)   useEffect(() => {
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  13)     if (!resumeFilename) return;
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  14)     let mounted = true;
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  15)     let objectUrl = null;
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  16) 
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  17)     const fetchFile = async () => {
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  18)       try {
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  19)         setLoading(true);
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  20)         setError(null);
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  21)         const token = (typeof window !== 'undefined') ? localStorage.getItem('token') : null;
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  22)         const headers = token ? { Authorization: `Bearer ${token}` } : {};
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  23)         const res = await fetch(`/api/upload/resume?file=${encodeURIComponent(resumeFilename)}`, { headers });
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  24)         if (!res.ok) throw new Error(`Failed to fetch resume: ${res.status}`);
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  25)         const arrayBuffer = await res.arrayBuffer();
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  26)         const fetchedContentType = res.headers.get('content-type') || 'application/pdf';
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  27)         setContentType(fetchedContentType);
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  28)         
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  29)         // Create blob URL for all file types
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  30)         const blob = new Blob([arrayBuffer], { type: fetchedContentType });
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  31)         objectUrl = URL.createObjectURL(blob);
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  32)         
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  33)         if (mounted) {
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  34)           setBlobUrl(objectUrl);
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  35)           
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  36)           // For DOCX files, we'll use Google Docs viewer for better formatting
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  37)           if (fetchedContentType.includes('wordprocessingml') || fetchedContentType.includes('msword')) {
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  38)             // Create a viewer URL using Google Docs viewer
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  39)             const fileUrl = encodeURIComponent(`${window.location.origin}/api/upload/resume?file=${encodeURIComponent(resumeFilename)}`);
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  40)             setViewerUrl(`https://docs.google.com/gview?url=${fileUrl}&embedded=true`);
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  41)           }
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  42)         }
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  43)       } catch (err) {
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  44)         if (mounted) setError(err.message || 'Could not load resume');
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  45)       } finally {
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  46)         if (mounted) setLoading(false);
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  47)       }
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  48)     };
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  49) 
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  50)     fetchFile();
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  51) 
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  52)     return () => {
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  53)       mounted = false;
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  54)       if (objectUrl) {
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  55)         URL.revokeObjectURL(objectUrl);
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  56)       }
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  57)     };
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  58)   }, [resumeFilename]);
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  59) 
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  60)   const handleDownload = (e) => {
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  61)     e.preventDefault();
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  62)     e.stopPropagation();
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  63)   };
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  64) 
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  65)   return (
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  66)     <div className="fixed inset-0 z-50 flex items-center justify-center">
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  67)       <div className="absolute inset-0 bg-black/50" onClick={() => onClose && onClose()} />
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  68)       <div className="relative bg-white rounded-lg shadow-lg w-11/12 md:w-3/4 lg:w-2/3 h-3/4 overflow-hidden">
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  69)         <div className="flex items-center justify-between p-3 border-b bg-gray-50">
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  70)           <h3 className="text-lg font-semibold">Resume Preview</h3>
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  71)           <div className="flex gap-2">
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  72)             <a
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  73)               href={`/api/upload/resume?file=${encodeURIComponent(resumeFilename)}&download=true`}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  74)               download
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  75)               className="px-3 py-1 border rounded text-sm text-primary-600 hover:bg-primary-50"
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  76)               onClick={(e) => e.stopPropagation()}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  77)             >
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  78)               Download
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  79)             </a>
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  80)             <button
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  81)               onClick={() => onClose && onClose()}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  82)               className="px-3 py-1 bg-gray-200 rounded hover:bg-gray-300 text-sm"
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  83)             >
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  84)               Close
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  85)             </button>
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  86)           </div>
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  87)         </div>
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  88) 
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  89)         <div className="w-full h-full bg-gray-100" onContextMenu={handleDownload}>
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  90)           {loading && (
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  91)             <div className="w-full h-full flex items-center justify-center">
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  92)               <div className="text-gray-500">Loading resume...</div>
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  93)             </div>
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  94)           )}
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  95)           {error && (
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  96)             <div className="p-4 text-red-600">Error loading resume: {error}</div>
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400  97)           )}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  98)           {!loading && !error && (
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400  99)             <>
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 100)               {/* DOCX files - use Google Docs viewer for original formatting */}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 101)               {(contentType.includes('wordprocessingml') || contentType.includes('msword')) && viewerUrl && (
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 102)                 <iframe
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 103)                   src={viewerUrl}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 104)                   title="Resume Preview"
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 105)                   className="w-full h-full border-0"
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 106)                   onContextMenu={handleDownload}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 107)                   onLoad={() => console.log('Google Docs viewer loaded')}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 108)                   onError={() => {
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 109)                     console.warn('Google Docs viewer failed, falling back to direct view');
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 110)                     setError('Document viewer unavailable. Please download to view the original format.');
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 111)                   }}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 112)                 />
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 113)               )}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 114)               
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 115)               {/* PDF files - native browser PDF viewer */}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 116)               {contentType.includes('pdf') && blobUrl && (
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 117)                 <object
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 118)                   data={blobUrl}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 119)                   type="application/pdf"
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 120)                   className="w-full h-full"
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 121)                   onContextMenu={handleDownload}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 122)                 >
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 123)                   <iframe 
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 124)                     src={blobUrl} 
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 125)                     title="Resume PDF" 
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 126)                     className="w-full h-full border-0"
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 127)                     onContextMenu={handleDownload}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 128)                   />
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 129)                 </object>
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 130)               )}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 131)               
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 132)               {/* Fallback for other file types */}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 133)               {!contentType.includes('pdf') && !contentType.includes('wordprocessingml') && !contentType.includes('msword') && blobUrl && (
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 134)                 <div className="w-full h-full flex flex-col items-center justify-center p-8">
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 135)                   <div className="text-gray-600 mb-4">
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 136)                     Preview not available for this file type.
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 137)                   </div>
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 138)                   <a
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 139)                     href={`/api/upload/resume?file=${encodeURIComponent(resumeFilename)}&download=true`}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 140)                     download
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 141)                     className="px-4 py-2 bg-primary-600 text-white rounded hover:bg-primary-700"
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 142)                   >
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 143)                     Download to View
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 144)                   </a>
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 145)                 </div>
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 146)               )}
5a2585de (Hien Vo        2025-10-27 13:07:01 -0400 147)             </>
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400 148)           )}
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400 149)         </div>
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400 150)       </div>
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400 151)     </div>
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400 152)   );
c84fd717 (Anjaney Sharma 2025-09-30 09:03:46 -0400 153) }

================== utils/resumeParser.js (Key Changes) ==================
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   1) import { Ollama } from 'ollama';
4db04d7d (Hien Vo 2025-10-26 19:21:44 -0400   2) import { SKILLS_DATABASE, TECHNICAL_SKILLS, SOFT_SKILLS } from '../data/skills.js';
b7173036 (Hien Vo 2025-10-14 08:44:01 -0400   3) 
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 280)       const escapedVariation = variation.toLowerCase().replace(/[+\-\[\]{}()*?.,\\^$|#\s]/g, '\\$&');
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 281)       const variationPattern = new RegExp(`\\b${escapedVariation}\\b`, 'i');
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 330)     const escapedSkill = skillLower.replace(/[+\-\[\]{}()*?.,\\^$|#\s]/g, '\\$&');
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 331)     const escapedPatterns = technicalContextPatterns.map(pattern =>
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 332)       pattern.replace(/\$\{skillLower\}/g, escapedSkill)
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 333)     );
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 334)     for (const pattern of escapedPatterns) {
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 335)       const regex = new RegExp(pattern, 'i');
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 380)     const escapedSkillSoft = skillLower.replace(/[+\-\[\]{}()*?.,\\^$|#\s]/g, '\\$&');
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 381)     const escapedSoftPatterns = softSkillPatterns.map(pattern =>
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 382)       pattern.replace(/\$\{skillLower\}/g, escapedSkillSoft)
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 383)     );
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 384)     for (const pattern of escapedSoftPatterns) {
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 385)       const regex = new RegExp(pattern, 'i');

================== app/api/upload/resume/route.js (Key Changes) ==================
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400   4) import { ResumeProcessingService } from '../../../../services/resumeProcessingService';
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  85)     const download = searchParams.get('download') === 'true';
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 103)       const disposition = download ? 'attachment' : 'inline';
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 104)       return new Response(fileBuffer, {
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 105)         headers: {
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 106)           'Content-Type': contentType,
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 107)           'Content-Disposition': `${disposition}; filename="${userWithFile.resumeOriginalName || filename}"`,
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 108)         },
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 109)       });
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 119)     const disposition = download ? 'attachment' : 'inline';
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 120)     return new Response(fileBuffer, {
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 121)       headers: {
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 122)         'Content-Type': contentType,
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 123)         'Content-Disposition': `${disposition}; filename="${filename}"`,
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 124)       },
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400 125)     });

================== components/ResumeStatus.js (Key Changes) ==================
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  67)               <a
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  68)                 href={`/api/upload/resume?file=${encodeURIComponent(resumeStatus.resumeInfo.resumeFilename)}&download=true`}
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  69)                 target="_blank"
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  70)                 rel="noopener noreferrer"
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  71)                 className="px-3 py-1 border rounded text-primary-600 hover:bg-gray-50 dark:hover:bg-gray-700 dark:text-primary-400 dark:border-gray-600"
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  72)               >
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  73)                 Download
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400  74)               </a>

================== package.json (Dependency Removal) ==================
5a2585de (Hien Vo 2025-10-27 13:07:01 -0400) Removed: "mammoth": "^1.8.0"

================== Sprint 3 Summary ==================
Key changes made by Hien Vo in Sprint 3 (commit 5a2585de):

1. **Dependency Cleanup**: Removed mammoth library dependency from textExtractor.js
   - Implemented basic DOCX text extraction without external dependencies
   - Added fallback parsing for skill detection

2. **Resume Viewer Enhancement**: Updated ResumeViewer.js for native format display
   - Added Google Docs viewer integration for DOCX files
   - Enhanced PDF viewing with native browser support
   - Added download functionality separation

3. **Regex Error Fix**: Fixed regex escaping in resumeParser.js
   - Escaped special characters in skill patterns (C++, C#, etc.)
   - Prevented "Nothing to repeat" regex errors

4. **Download/Preview Separation**: Modified upload/resume route
   - Added download query parameter support
   - Controlled Content-Disposition header (inline vs attachment)
   - Updated ResumeStatus.js download links

5. **Import Path Fix**: Corrected service import paths
   - Fixed ResumeProcessingService import path

Total lines modified: ~150+ lines across 6 files
Primary focus: Document viewing enhancement and dependency cleanup